#!/usr/bin/env bash

##############################################
#	Author: Nidia Achrys
#	Project: trash
#	Version: 1.0
#
#	Usage: trash [command] [args]
#
#	Description:
#		This utility manages your trash bin.
##############################################

PRINT()
{
	printf "%b\n" "${@}"
}

PAUSE ()
{
	read -p "Press <ENTER> to continue..."

	return 0
}

LOWERCASE ()
{
	printf "${1}" | tr "[:upper:]" "[:lower:]"
	return 0
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then

	PROGRAM_NAME="$(basename "$0")"

	PRINT "'${PROGRAM_NAME}' should not be run as root. Please try again as a normal user."
	exit 1
fi

declare -- TRASHINFO
declare -- FILENAME
declare -- FILEINFO
declare -- DELPATH
declare -- DELDATE
declare -- FILEPATH
declare -- FILEINFO
declare -- RESTOREPATH

TRASHDIRS=$HOME/.local/share/Trash
TRASHINFO=$TRASHDIRS/info
[ -z "$TRASH" ] && TRASH=$TRASHDIRS/files

trash.file.check()
{
  if [ -n "$1" ];
  then
    FILE="$1"
  else
    PRINT "You must specify a FILE." && exit 1
  fi
}

trash.getPath()
{
  confFile="${1}"
  PRINT "$(grep -m 1 Path= ${confFile} | sed 's|Path=||')"
}

trash.getDate()
{
  confFile="${1}"
  PRINT "$(grep -m 1 DeletionDate= ${confFile} | sed 's|DeletionDate=||')"
}

trash.files.add()
{
  trash.file.check "$1"
  if [ -e "${FILE}" ];
  then
    FILENAME="$(basename ${FILE})"
    DELFILE="${TRASHINFO}/${FILE}.trashinfo"
    DELPATH=$(readlink -f ${FILE})
    DELDATE=$(date +"%Y-%m-%dT%H:%M:%S")

    PRINT "[Trash Info]" > "${TRASHINFO}/${FILENAME}.trashinfo"
    PRINT "Path=${DELPATH}" >> "${TRASHINFO}/${FILENAME}.trashinfo"
    PRINT "DeletionDate=${DELDATE}" >> "${TRASHINFO}/${FILENAME}.trashinfo"
    mv ${FILE} ${TRASH}
    
    PRINT "Moved ${FILE} to the trash!"
    exit 0
  else
    PRINT "File '${FILE}' doesn't exist!" && exit 1
  fi
}

trash.files.restore()
{
  trash.file.check "$1"

  FILEPATH="${TRASH}/${FILE}"
  FILEINFO="${TRASHINFO}/${FILE}.trashinfo"

  if [ -f "${FILEINFO}" ] && [ -e "${FILEPATH}" ];
  then
    RESTOREPATH="$(trash.getPath ${FILEINFO})"
    
    mv "${FILEPATH}" "${RESTOREPATH}"
    rm -f "${FILEINFO}"

    PRINT "Restored ${FILE} to ${RESTOREPATH}!"
    exit 0
  else
    PRINT "File ${FILE} is not in the trash!" && exit 1
  fi
}

trash.files.empty()
{
  local files=()

  # Create a list of all files in the trash, hidden and not hidden
  files=(`find ${TRASH} -maxdepth 1`)
  unset files[0]

  # Fail if there are no files in the trash
  [ ${#files[@]} -eq 0 ] && PRINT "There are no files in the trash!" && exit 1

  # Remove all files from the trash
  for file in ${files[@]}
  do
    rm -rf $file
  done
  
  # Confirmation
  PRINT "Emptied the trash!"
  exit 0
}

trash.files.information()
{
  trash.file.check "$1"

  FILEINFO=$TRASHINFO/"${FILE}.trashinfo"
  
  if [ -e "${FILEINFO}" ];
  then
    cat "${FILEINFO}"
    exit 0
  else
    PRINT "File does not have metadata / doesn't exist!" && exit 1
  fi
}

trash.help()
{

  trash.help.commands()
  {
    PRINT "Command|Arguments|Description"
    PRINT "(a) add|<file>|Add a file to the trash"
    PRINT "(r) restore|<file>|Restore a file from the trash"
    PRINT "(e) empty||Empty the trash bin"
    PRINT "(i) info|<file>|Get a trashed file's metadata"
    PRINT "(l) list||List the contents of the trash bin"
    PRINT "(h) help||Show this prompt"
  }

  PRINT
  PRINT "Manage your trash bin"
  PRINT
  PRINT "Usage:\t\ttrashr [command] <args?[]>"
  PRINT "Example:\ttrashr add \$HOME/Documents/file.docx"
  PRINT 
  trash.help.commands | column -t -s "|"
}

cmd="$(LOWERCASE ${1})"

case "${cmd}" in
  a | add )
    trash.files.add "${2}"
    ;;
  r | restore)
    trash.files.restore "${2}"
    ;;
  e | empty )
    trash.files.empty
    ;;
  l | list )
    ls --color=auto -AlvhF --group-directories-first $TRASH
    exit 0
    ;;
  i | info )
    trash.files.information "${2}"
    ;;
  \? | h | help )
    trash.help
    ;;
  * )
  	[ -z "${cmd}" ] && trash.help || PRINT "Invalid command!" && exit 1
    ;;
esac
