#!/usr/bin/env bash

##############################################
#   Author: Roy Conn
#   Project: powermgr
#   Version: 1.0
#
#   Usage: [flags]
#
#   Description:
#	Shutdown, reboot, logout, lock, etc.
##############################################

# shellcheck disable=SC1091
source "${SCRIPTS:=$HOME/.local/bin}"/00-api.sh

# Preprocessor flags
DISABLE_ROOT

####################################

# Rofi power menu
powermgr.gui() {

	# If zenity or rofi are missing then disallow GUI use.
	REQUIRE_CMD "zenity" "rofi" || return 1

	# If no display then disallow GUI use.
	[[ -z "$DISPLAY" ]] && PRINT "No valid display!" && return 1 1

	# Turns on zenity dialogs
	GUI=1

	# Receive command from rofi
	cmd="$(LOWERCASE $(PRINT 'Shutdown\nReboot\nLock\nLogout\nCancel' | rofi -dmenu -i -window-title "Power Manager" -prompt "Option: "))"

	# Show message 'cancelled' if cmd is empty (exit from rofi)
	[[ "${cmd}" == "" ]] && zenity --info --text="Cancelled." && return 1
}

# Shutdown PC
powermgr.shutoff() {
	[[ $GUI -eq 1 ]] && zenity --info --text="Shutting down..."

	systemctl poweroff
}

# Restart PC
powermgr.restart() {
	[[ $GUI -eq 1 ]] && zenity --info --text="Rebooting..."

	systemctl reboot
}

# Kill user process and logout
powermgr.logout() {
	[[ $GUI -eq 1 ]] && zenity --info --text="Logging out..."

	killall -u $USER
}

# Screen locker
powermgr.lock() {
	[[ $GUI -eq 1 ]] && zenity --info --text="Locking screen..."

	# Lightdm lock command
	CMD_EXISTS "dm-tool" && dm-tool lock && return 0

	# Systemd lock command (doesn't work with lightdm)
	SESSIONS=($(loginctl list-sessions | grep $(whoami) | awk '{print $1}' | tr '\n' ' '))
	loginctl lock-session ${SESSIONS[@]}
}

# Unlock available for KDE connect (CLI/Phone only)
# Does not work with Lightdm
powermgr.unlock() {
	# Systemd unlock command (doesn't work with lightdm)
	SESSIONS=($(loginctl list-sessions | grep $(whoami) | awk '{print $1}' | tr '\n' ' '))
	loginctl unlock-session ${SESSIONS[@]}
}

# Help prompt (CLI only)
powermgr.help() {
	powermgr.help.commands() {
		PRINT "Command|Arguments|Description"
		PRINT "shutdown||Power off computer"
		PRINT "reboot||Restart computer"
		PRINT "logout||Log out of account"
		PRINT "lock||Lock user account"
		PRINT "unlock||Unlock user account (CLI only)"
		PRINT "|||"
		PRINT "gui||Show the interactive prompt"
		PRINT "help||Show this help menu"
	}

	PRINT
	PRINT "Manage the state of your running PC or user account"
	PRINT
	PRINT "Usage:\t\tpowermgr [command]"
	PRINT "Example:\tpowermgr shutdown"
	PRINT "Example:\tpowermgr\t\t# Run for interactive prompt"
	PRINT
	powermgr.help.commands | column -t -s "|"
}

test $# -eq 0 && powermgr.help && exit 0
[[ "${1}" == "gui" ]] && powermgr.gui
[[ "${1}" != "gui" ]] && cmd="$(LOWERCASE ${1})"

# Evaluate commands
case "${cmd}" in
	shutdown) powermgr.shutoff ;;
	reboot) powermgr.restart ;;
	logout) powermgr.logout ;;
	lock) powermgr.lock ;;
	unlock) powermgr.unlock ;;
	help) powermgr.help ;;
	helpgui) zenity --info --height=800 --width=800 --text="$(powermgr.help)" ;;
	cancel) zenity --info --text="Cancelled." && exit 1 ;;
	*) zenity --warning --text="Invalid command '${cmd}'." && exit 1 ;;
esac

