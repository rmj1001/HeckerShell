#!/usr/bin/env bash

# Description: Replacement for 'echo'
#
# Usage: PRINT "text"
PRINT()
{
	printf "%b\n" "${@}"
}


# Description: Converts a string to all api.std.failMsg characters
#
# Usage: name="$(LOWERCASE $name)"
LOWERCASE ()
{
	printf "%b" "${1}" | tr "[:upper:]" "[:lower:]"
	return 0
}

# Description: Checks for a filename in $PATH (commands), if not found then exit with an error
#
# Usage: REQUIRE_CMD "7z" "tar"
REQUIRE_CMD ()
{
	NEEDED=()

	for arg in "${@}"; do
		if [[ ! -x "$(which "$arg")" ]]; then

			NEEDED+=("${arg}")

		fi
	done

	if [[ ${#NEEDED[@]} -gt 0 ]]; then
		printf "%b\n" "The following programs are required to run this program:"
		printf "%b\n" "${NEEDED[@]}"
		
		exit 1
	fi
}

####################################

# Rofi power menu
powermgr.gui()
{
	PRINT 'Shutdown\nReboot\nLock\nLogout\nCancel' | rofi -dmenu -i -window-title "Power Manager" -prompt "Option: "
}

# Shutdown PC
powermgr.shutoff()
{
    [[ $GUI -eq 1 ]] && zenity --info --text="Shutting down..."

    systemctl poweroff
}

# Restart PC
powermgr.restart()
{
    [[ $GUI -eq 1 ]] && zenity --info --text="Rebooting..."
    
    systemctl reboot
}

# Kill user process and logout
powermgr.logout()
{
    [[ $GUI -eq 1 ]] && zenity --info --text="Logging out..."

    killall -u $USER
}

# Screen locker
powermgr.lock()
{
    [[ $GUI -eq 1 ]] && zenity --info --text="Locking screen..."

	# Lightdm lock command
    [[ -x "$(which dm-tool)" ]] && dm-tool lock && return 0

	# Systemd lock command (doesn't work with lightdm)
	SESSIONS=( $(loginctl list-sessions | grep $(whoami) | awk '{print $1}' | tr '\n' ' ') )
    loginctl lock-session ${SESSIONS[@]}
}

# Unlock available for KDE connect (CLI/Phone only)
# Does not work with Lightdm
powermgr.unlock()
{
	# Systemd unlock command (doesn't work with lightdm)
	SESSIONS=( $(loginctl list-sessions | grep $(whoami) | awk '{print $1}' | tr '\n' ' ') )
	loginctl unlock-session ${SESSIONS[@]}
}

# Help prompt (CLI only)
powermgr.help()
{
	powermgr.help.commands()
	{
		PRINT "Command|Arguments|Description"
		PRINT "shutdown||Power off computer"
		PRINT "reboot||Restart computer"
		PRINT "logout||Log out of account"
		PRINT "lock||Lock user account"
		PRINT "unlock||Unlock user account (CLI only)"
		PRINT "|||"
		PRINT "gui||Show the interactive prompt"
		PRINT "help||Show this help menu"
	}

	PRINT
	PRINT "Manage the state of your running PC or user account"
	PRINT
	PRINT "Usage:\t\tpowermgr [command]"
	PRINT "Example:\tpowermgr shutdown"
	PRINT "Example:\tpowermgr\t\t# Run for interactive prompt"
	PRINT
	powermgr.help.commands | column -t -s "|"
}

# Check for root
if [[ $EUID -eq 0 ]]; then
	
	PRINT "This script cannot be run with root."
	exit 1

fi

# Command to be evaluated
cmd=""

# If the gui is invoked, use ROFI and turn on zenity dialogs.
if [[ "$1" == "gui" ]]; then

	# If zenity or rofi are missing then disallow GUI use.
	REQUIRE_CMD "zenity" "rofi"

	# If no display then disallow GUI use.
	[[ -z "$DISPLAY" ]] && PRINT "No valid display!" && exit 1
	
	# Turns on zenity dialogs
	GUI=1

	# Receive command from rofi
	cmd="$(LOWERCASE $(powermgr.gui))"

	# Show message 'cancelled' if cmd is empty (exit from rofi)
	[[ "${cmd}" == "" ]] && zenity --info --text="Cancelled." && exit 1

# If input is blank, show help prompt.
elif [[ -z "$1" ]]; then
	
	powermgr.help && exit 0

else
	
	cmd="$(LOWERCASE ${1})"

fi

# Evaluate commands
case "$(LOWERCASE ${cmd})" in
    shutdown ) powermgr.shutoff ;;
    reboot ) powermgr.restart ;;
    logout ) powermgr.logout ;;
    lock ) powermgr.lock ;;
    unlock ) powermgr.unlock ;;
	cancel ) zenity --info --text="Cancelled." && exit 1 ;;
	help ) powermgr.help ;;
	* ) zenity --warning --text="Invalid command." && exit 1 ;;
esac
