#!/usr/bin/env bash

##############################################
#	Author: Nidia Achrys
#	Project: fetcher
#	Version: 1.0
#
#	Usage: fetcher
#
#	Description:
#		Retrieve system information for use in screenshots
##############################################

PRINT ()
{
	printf "%b\n" "${@}"
}

REQUIRE ()
{
	for arg in "${@}"; do
		if [[ ! -x "$(which "$arg")" ]]; then

			PRINT "'${arg}' is required to run this program!"
			exit 1

		fi
	done
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then

	PROGRAM_NAME="$(basename "$0")"

	PRINT "'${PROGRAM_NAME}' should not be run as root. Please try again as a normal user."
	exit 1
fi

# Dependencies
REQUIRE "grep" "sed" "uname" "cat"

fetcher.fetch ()
{
    # Operating System Information
    OS="$(grep '^NAME=' /etc/os-release | sed 's/NAME=//;s/"//g')"
    OS="${OS} $(grep '^VERSION=' /etc/os-release | sed 's/VERSION=//;s/"//g')"

    # Host, Kernel, and Uptime Information
    HOST="$(uname -n)"
    KERNEL="$(uname -r)"
    UPTIME=$(uptime --pretty | sed 's|^up\s||')

    # Package count
    PKGCOUNT=""
    [[ -x "$(command -v pacman)" ]] && \
	    PKGCOUNT="${PKGCOUNT}$(pacman -Qq | wc -l) (pacman), "
    [[ -x "$(command -v apt)" ]] && \
	    PKGCOUNT="${PKGCOUNT}$(apt list --installed 2>/dev/null | wc -l) (apt), "
    [[ -x "$(command -v dnf)" ]] && \
	    PKGCOUNT="${PKGCOUNT}$(dnf list installed | wc -l) (rpm), "
    [[ -x "$(command -v flatpak)" ]] && \
	    PKGCOUNT="${PKGCOUNT}$(flatpak list | wc -l) (flatpak), "
    [[ -x "$(command -v snap)" ]] && snapCount=$(snap list | wc -l) && \
	    PKGCOUNT="${PKGCOUNT}$snapCount (snap), "

    # Processor
    CORES=$(grep -c processor < /proc/cpuinfo)
    CPUNAME=$(grep '^model name' /proc/cpuinfo -m 1 | sed -E 's|^model\sname\s*:\s||g')

    # Memory
    MEMTOTALKB=$(grep 'MemTotal' /proc/meminfo | sed -e 's|MemTotal:\s*||g' -e 's|\s*kB\s*||g')
    MEMFREEKB=$(grep 'MemFree' /proc/meminfo | sed -e 's|MemFree:\s*||g' -e 's|\s*kB\s*||g')

    MEMFREE=$(( MEMFREEKB / 1000 ))
    MEMTOTAL=$(( MEMTOTALKB / 1000 ))

    MEMORY="$MEMFREE MB / $MEMTOTAL MB"

    # Resolution
    RESOLUTION="$(xrandr -q | grep current | sed -e 's|.*current\s||g' -e 's|,.*||g')"

    # Terminal
    case "$(ps -p $(ps -p $$ o ppid=) o args= | sed 's|.*/||')" in

        *gnome-terminal* ) TERMINAL="gnome-terminal" ;;
        *lxterminal* ) TERMINAL="lxterminal" ;;
        *rxvt* ) TERMINAL="rxvt" ;;

    esac
}

# Print out the information gathered
fetcher.info()
{
    PRINT "Name|${USER}@${HOST}"
    PRINT "OS|${OS}"
    PRINT "Kernel|${KERNEL}"
    PRINT "Uptime|${UPTIME}"
    PRINT "Packages|${PKGCOUNT/%, /}"
    PRINT "Shell|${SHELL}"
    PRINT "Processor|${CPUNAME}"
    PRINT "Cores|${CORES}"
    PRINT "Resolution|${RESOLUTION}"
    PRINT "Display Server|${XDG_SESSION_TYPE}"
    PRINT "Memory|${MEMORY}"
    [[ -n "${TERMINAL}" ]] && PRINT "Terminal|${TERMINAL}"
}

fetcher.info.neofetch()
{
    PRINT "OS|${OS}"
    PRINT "Kernel|${KERNEL}"
    PRINT "Uptime|${UPTIME}"
    PRINT "Packages|${PKGCOUNT/%, /}"
    PRINT "Shell|${SHELL}"
    PRINT "Resolution|${RESOLUTION}"
    PRINT "Display Server|${XDG_SESSION_TYPE}"
    PRINT "Memory|${MEMORY}"
    [[ -n "${TERMINAL}" ]] && PRINT "Terminal|${TERMINAL}"
}

# Retrieve
fetcher.fetch

[[ "$1" == "--clear" ]] && clear

if [[ "$1" == "--neofetch" ]]; then

    PRINT
    PRINT "${USER}@${HOST}"
    PRINT "---------------"
    fetcher.info.neofetch | column -t -s "|"
    PRINT
    
    exit 0

else

    line="---------------------------------------------------------"

    # Header
    PRINT $line
    PRINT "|                        Fetcher                        |"
    PRINT $line

    # Print
    PRINT
    fetcher.info | column -t -s "|"
    PRINT

    exit 0

fi
