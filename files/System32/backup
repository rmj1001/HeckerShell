#!/usr/bin/env bash

##############################################
#   Author: RMCJ <rmichael1001@gmail.com>
#   Project: backup
#   Version: 1.0
#
#   Usage:
#
#   Description:
#		Backup files
##############################################

# shellcheck disable=SC1091
source "${SCRIPTS:=$HOME/.local/bin}"/00-api.sh

# Preprocessor flags
DISABLE_ROOT

####################################

### Variables ###
exclusions="${HOME}/.backup_exclusions"
method="tar"
ARGS=()

function backup.create() {
	clear

	# If the directory doesn't exist, throw an error and exit
	[[ ! -d "${1}" ]] && PRINT "Invalid destination directory!\n" && PAUSE && clear && exit 1

	# Cleanly exit backup process
	trap 'clear; PRINT "Backup Terminated."; PAUSE; clear; exit 0' SIGTERM SIGINT

	local target

	case "${method}" in
	tar)
		target="${1}/${USER}_$(date +m%m-d%d-y%y).tar.gz"

		# Check if tar exists
		REQUIRE_CMD "tar" || return 1

		# Remove duplicate backup
		[[ -f "${target}" ]] && PRINT "Removing duplicate backup..." && rm -rf "${target}"

		# Confirmation
		PRINT "Backing up with tar..."

		# Backups up files, with exclusions if file exists, or without exclusions if no file exists.
		[[ -f "${exclusions}" ]] && tar -zcvpf "${target}" -X "${exclusions}" "${HOME}"
		[[ ! -f "${exclusions}" ]] && tar -zcvpf "${target}" "${HOME}"

		;;
	rsync)
		target="${1}/${USER}_$(date +m%m-d%d-y%y)"

		# Check if rsync exists
		REQUIRE_CMD "rsync"

		# Remove duplicate backup
		[[ -d "${target}" ]] && PRINT "Removing duplicate backup..." && rm -rf "${target}"

		# Confirmation
		PRINT "Backing up with rsync..."

		# Backup all files
		[[ -f "${exclusions}" ]] && rsync -arzvhP --exclude-from="${exclusions}" "${HOME}/" "${target}"
		[[ ! -f "${exclusions}" ]] && rsync -arzvhP "${HOME}/" "${target}"

		;;
	cp)
		target="${1}/${USER}_$(date +m%m-d%d-y%y)"

		# Check if rsync exists
		REQUIRE_CMD "cp"

		# Remove duplicate backup
		[[ -d "${target}" ]] && PRINT "Removing duplicate backup..." && rm -rf "${target}"

		# Confirmation
		PRINT "Backing up with cp..."

		# Backup all files
		cp -vR "${HOME}" "${target}"

		;;
	esac

	# Confirmation
	PRINT "\n\nBackup finished."
	PAUSE
	clear
}

function backup.restore() {
	clear

	# Cleanly exit backup process
	trap 'clear; PRINT "Backup Terminated."; PAUSE; clear; exit 0' SIGTERM SIGINT

	# If target isn't a file/tarball, or it's not a directory, print error and exit
	[[ ! -f "${target}" && ! "${target}" =~ ^*.tar.gz$ && ! -d "${target}" ]] &&
		PRINT "Invalid backup target!" && return 1

	# Tarball
	[[ -f "${target}" && "${target}" =~ ^*.tar.gz$ ]] && PRINT "Restoring tarball..." &&
		tar -xvf "${target}" -C "${HOME}" && PRINT "\n\nRestore Finished.\n" && return 0 ||
		return 1

	# Directory, use rsync if exists
	[[ -d "${target}" ]] && REQUIRE_CMD "rsync" >/dev/null 2>&1 && PRINT "Restoring backup" &&
		rsync -auv "${target}" "${HOME}" && PRINT "\n\nRestore Finished.\n" && return 0 ||
		return 1

	# Directory, use cp if rsync is missing
	[[ -d "${target}" ]] && REQUIRE_CMD "cp" >/dev/null 2>&1 && PRINT "Restoring backup..." &&
		cp -vR "${target}" "${HOME}" && PRINT "\n\nRestore Finished.\n" && return 0 ||
		return 1

	PRINT "Error restoring backup..." && return 1
}

# Create/edit the exclusions file
function backup.exclusions() {

	local name

	if [[ ! -f "${exclusions}" ]]; then

		touch "${exclusions}"

		for f in "${HOME}"/{.,}*; do

			name="$(basename "$f")"

			if [[ "${name}" != "." ]] && [[ "${name}" != ".." ]]; then
				PRINT "${name}" >>"${exclusions}"
			fi

		done
	fi

	${EDITOR:-nano} "${exclusions}"
}

function backup.help() {
	PRINT "$(SCRIPTNAME) - Create/restore backups of your HOME directory"
	PRINT
	PRINT "Usage:\t\t$(SCRIPTNAME) <flag/command> <args?>"
	PRINT "Example:\t$(SCRIPTNAME) --help"
	PRINT
	{
		PRINT "-------------|------|---------------------"
		PRINT "Flag|Args|Description"
		PRINT "-------------|------|---------------------"
		PRINT "||"
		PRINT "--tar||(Default) Uses tar to backup your files"
		PRINT "--rsync||Uses rsync to backup your files"
		PRINT "--cp||Uses cp to backup your files (no exclusions)"
		PRINT "||"
		PRINT "-------------|------|---------------------"
		PRINT "Commands|Args|Description"
		PRINT "-------------|------|---------------------"
		PRINT "||"
		PRINT "-c, --create|<destination>|Create a new backup"
		PRINT "-r, --restore|<target>|Restore a backup"
		PRINT "-e, --exclusions||Create/edit a file specifying exclusions from backups"
		PRINT "||"
		PRINT "-h, --help|n/a|Show this prompt"
	} | column -t -s'|'
}

### Flags ###
for arg in "$@"; do
	case "$(LOWERCASE "$arg")" in
	--rsync)
		method="rsync"
		;;

	--tar)
		method="tar"
		;;

	--cp)
		method="cp"
		;;
	*)
		ARGS+=("$arg")
		;;
	esac
done

### Argument Handling ###
cmd="$(LOWERCASE "${ARGS[0]}")"

case "${cmd}" in

-c | --create)

	backup.create "${ARGS[1]}" && exit 0 || exit 1
	;;

-r | --restore)

	backup.restore "${ARGS[1]}" && exit 0 || exit 1
	;;

-e | --exclusions)

	backup.exclusions && exit 0 || exit 1
	;;

\? | -h | --help)
	backup.help
	exit 0
	;;

*)

	[[ $# -eq 0 ]] && backup.help || PRINT "Invalid command!" && exit 1
	;;
esac
