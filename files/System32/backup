#!/usr/bin/env bash

### Helper Functions ###
PRINT()
{
	printf "%b\n" "$@"

	return 0
}

PAUSE()
{
	read -r -p "Press <ENTER> to continue..."

	return 0
}

LOWER()
{
	printf "%b" "$@" | tr '[:upper:]' '[:lower:]'
}

REQUIRE ()
{
	for arg in "${@}"; do
		if [[ ! -x "$(which "$arg")" ]]; then

			PRINT "'${arg}' is required to run this program!"
			exit 1

		fi
	done
}


### Variables ###
exclusions="${HOME}/.backup_exclusions"
method="tar"
ARGS=()

# Check if running as root
if [[ $EUID -eq 0 ]]; then

	PROGRAM_NAME="$(basename "$0")"

	PRINT "'${PROGRAM_NAME}' should not be run as root. Please try again as a normal user."
	exit 1
fi

backup.create()
{
	clear

	# If the directory doesn't exist, throw an error and exit
	[[ ! -d "${1}" ]] && PRINT "Invalid destination directory!\n" && PAUSE && clear && exit 1

	# Cleanly exit backup process
	trap 'clear; PRINT "Backup Terminated."; PAUSE; clear; exit 0' SIGTERM SIGINT

	local target

	case "${method}" in	
		tar )
			target="${1}/${USER}_$(date +m%m-d%d-y%y).tar.gz"
			[[ -f "${target}" ]] && rm -rf "${target}"

			# Check if tar exists
			REQUIRE "tar"

			# Remove duplicate backup
			[[ -f "${target}" ]] && PRINT "Removing duplicate backup..." && rm -rf "${target}"

			# Confirmation
			PRINT "Backing up with tar..."

			# Backups up files, with exclusions if file exists, or without exclusions if no file exists.
			[[ -f "${exclusions}" ]] && tar -zcvpf "${target}" -X "${exclusions}" "${HOME}"
			[[ ! -f "${exclusions}" ]] && tar -zcvpf "${target}" "${HOME}"

			;;
		rsync )
			target="${1}/${USER}_$(date +m%m-d%d-y%y)"

			# Check if rsync exists
			REQUIRE "rsync"

			# Remove duplicate backup
			[[ -d "${target}" ]] && PRINT "Removing duplicate backup..." && rm -rf "${target}"

			# Confirmation
			PRINT "Backing up with rsync..."

			# Backup all files
			[[ -f "${exclusions}" ]] && rsync -arzvhP --exclude-from="${exclusions}" "${HOME}/" "${target}"
			[[ ! -f "${exclusions}" ]] && rsync -arzvhP "${HOME}/" "${target}"

			;;
		cp )
			target="${1}/${USER}_$(date +m%m-d%d-y%y)"

			# Check if rsync exists
			REQUIRE "cp"

			# Remove duplicate backup
			[[ -d "${target}" ]] && PRINT "Removing duplicate backup..." && rm -rf "${target}"

			# Confirmation
			PRINT "Backing up with cp..."

			# Backup all files
			cp -vR "${HOME}" "${target}"

			;;
	esac

	# Confirmation
	PRINT "\n\nBackup finished."
	PAUSE
	clear
}

backup.restore()
{
	clear

	# Cleanly exit backup process
	trap 'clear; PRINT "Backup Terminated."; PAUSE; clear; exit 0' SIGTERM SIGINT

	if [[ -f "${target}" ]] && [[ "${target}" =~ ^*.tar.gz$ ]]; then

		# tar
		PRINT "Restoring tarball..."

		tar -xvf "${target}" -C "${HOME}"

	elif [[ -d "${target}" ]] && [[ -x "$(which rsync)" ]]; then

		# rsync
		PRINT "Restoring backup..."

		rsync -auv "${target}" "${HOME}"

	elif [[ -d "${target}" ]]; then

		# cp
		PRINT "Restoring backup..."

		cp -vR "${target}" "${HOME}"

	else

		# Error
		PRINT "Invalid target!"
		exit 1

	fi

	PRINT
	PRINT
	PRINT "Restore Finished"
	PAUSE
	clear
}

# Create/edit the exclusions file
backup.exclusions()
{

	local name

	if [[ ! -f "${exclusions}" ]]; then

		touch "${exclusions}"

		for f in "${HOME}"/{.,}*; do

			name="$(basename "$f")"

			if [[ "${name}" != "." ]] && [[ "${name}" != ".." ]]; then
				PRINT "${name}" >> "${exclusions}"
			fi

		done
	fi

	${EDITOR:-nano} "${exclusions}"
}

# Help prompt
backup.help()
{
	# Commands portion of help prompt (columnized)
	backup.help.commands()
	{
		PRINT "Flags|Arguments|Description"
		PRINT "-t, --tar||(Default) Uses tar to backup your files"
		PRINT "-r, --rsync||Uses rsync to backup your files"
		PRINT "-c, --cp||Uses cp to backup your files (no exclusions)"
		PRINT "|||"
		PRINT "Commands|Arguments|Description"
		PRINT "(c) create|<destination>|Create a new backup"
		PRINT "(r) restore|<target>|Restore a backup"
		PRINT "(e) exclusions||Create/edit a file specifying exclusions from backups"
		PRINT "(h) help||Show this prompt"
	}

	PRINT
	PRINT "Create/restore tarball backups of your HOME directory"
	PRINT 
	PRINT "Usage:\t\tbackup [command] [flag] <args?[]>"
	PRINT "Example:\tbackup create --rsync \$HOME/Documents/Backups"
	PRINT
	backup.help.commands | column -t -s "|"
}

### Flags ###
for arg in "$@"; do
	case "$(LOWER "$arg")" in
		-r | --rsync )
			method="rsync"
			;;

		-t | --tar )
			method="tar"
			;;

		-c | --cp )
			method="cp"
			;;
		* )
			ARGS+=("$arg")
			;;
	esac
done

### Argument Handling ###
cmd="$(LOWER "${ARGS[0]}")"

case "${cmd}" in

	c | create ) 

		backup.create "${ARGS[1]}" ;;

	r | restore ) 

		backup.restore "${ARGS[1]}" ;;

	e | exclusions )

		backup.exclusions ;;

	\? | h | help )
		backup.help ;;

	* )

		[[ $# -eq 0 ]] && backup.help || PRINT "Invalid command!" && exit 1
		;;
esac
