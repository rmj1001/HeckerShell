#!/usr/bin/env bash

##############################################
#   Author: Roy Conn
#   Project: scriptctl
#   Version: 1.0
#
#   Usage:
#
#   Description:
#		Manage user scripts
##############################################

# shellcheck disable=SC1091
source "${SCRIPTS:=$HOME/.local/bin}"/00-api.sh

# Preprocessor flags
DISABLE_ROOT

####################################

SCRIPTS="${SCRIPTS:=$HOME/.local/bin}"

_help() {
	_flags() {
		PRINT "-------------|------|---------------------|"
		PRINT "Flag|Args|Description"
		PRINT "-------------|------|---------------------|"
		PRINT "-ls, --list|n/a|List all user scripts"
		PRINT "-mk, --create|<name>|Create a new script"
		PRINT "-ed, --edit|<name>|Edit an existing script"
		PRINT "-rm, --delete|<name>|Delete a script"
		PRINT "|||"
		PRINT "-h, --help|n/a|Show this prompt"
	}

	PRINT "scriptctl - Manage user scripts"
	PRINT
	PRINT "Usage:\t\tscriptctl <flag> <args?>"
	PRINT "Example:\tscriptctl --list"
	PRINT
	_flags | column -t -s'|'
}

_ls() {
	dir="${PWD}"
	cd "${SCRIPTS}" || exit
	ls -alvhF --group-directories-first
	cd "${dir}" || exit
}

_mk() {
	# Check for script name argument
	[[ -z "${1}" ]] && PRINT "You must specify a script name!" && exit 1

	# Check if script exists
	[[ -e "${SCRIPTS}"/"${1}" ]] && PRINT "Script '${1}' already exists!" && return 1

	cp "${SCRIPTS}"/00-template.sh "${SCRIPTS}"/"${1}".sh &&
		mv "${SCRIPTS}"/"${1}".sh "${SCRIPTS}"/"${1}" &&
		chmod +x "${SCRIPTS}"/"${1}" && ${EDITOR:=nano} "${SCRIPTS}"/"${1}" &&
		PRINT "scriptctl: Created '${1}'."
}

_ed() {
	# Check for script name argument
	[[ -z "${1}" ]] && PRINT "You must specify a script name!" && return 1

	# Check if script exists
	[[ ! -e "${SCRIPTS}"/"${1}" ]] && PRINT "Script '${1}' doesn't exist!" && return 1

	# Edit the script
	${EDITOR:=nano} "${SCRIPTS}"/"${1}" &&
		PRINT "scriptctl: Edited '${1}'."
}

_rm() {
	# Check for script name argument
	[[ -z "${1}" ]] && PRINT "You must specify a script name!" && return 1

	# Check if script exists
	[[ ! -e "${SCRIPTS}"/"${1}" ]] && PRINT "Script '${1}' doesn't exist!" && return 1

	# Confirm whether to delete script
	read -r -p "Are you sure you want to delete '${1}'? (y/N) " confirm

	# If 'no' or empty string passed, cancel.
	CHECK_NO "$confirm" && PRINT "Cancelled." && return 1

	# Delete script
	rm -f "${SCRIPTS}"/"${1}" &&
		PRINT "scriptctl: Removed '${1}'."
}

# If no arguments are given, just show help prompt.
[[ $# -eq 0 ]] && _help && exit 0

# Iterate over all arguments and evaluate them
while test $# -gt 0; do

	case "$(LOWERCASE "${1}")" in

	\? | -h | --help)
		shift
		_help
		exit $?
		;;

	-ls | --list)
		shift
		_ls
		exit $?
		;;

	-mk | --create)
		shift
		_mk "$@"
		exit $?
		;;

	-ed | --edit)
		shift
		_ed "$@"
		exit $?
		;;

	-rm | --delete)
		shift
		_rm "$@"
		exit $?
		;;

	*) PRINT "scriptctl: Invalid argument '${1}'" && exit 1 ;;

	esac

done
