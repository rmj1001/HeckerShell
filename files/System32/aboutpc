#!/usr/bin/env bash

##############################################
#	Author: Roy Conn
#	Project: aboutpc
#	Version: 1.0
#
#	Usage: aboutpc
#
#	Description:
#		Retrieve system information for use in screenshots
##############################################

# shellcheck disable=SC1091
source "${SCRIPTS:=$HOME/.local/bin}"/00-api.sh

# Preprocessor flags
DISABLE_ROOT
REQUIRE_CMD "grep" "sed" "uname" "cat" || exit 1

####################################

CLEAR=0
NEOFETCH=0

aboutpc.fetch() {
    # Operating System Information
    OS="$(grep '^NAME=' /etc/os-release | sed 's/NAME=//;s/"//g')"
    OS="${OS} $(grep '^VERSION=' /etc/os-release | sed 's/VERSION=//;s/"//g')"

    # Host, Kernel, and Uptime Information
    HOST="$(uname -n)"
    KERNEL="$(uname -r)"
    UPTIME=$(uptime --pretty | sed 's|^up\s||')

    # Package count
    PKGCOUNT=""
    CMD_EXISTS "pacman" && PKGCOUNT="${PKGCOUNT}$(pacman -Qq | wc -l) (pacman), "
    CMD_EXISTS "apt" && PKGCOUNT="${PKGCOUNT}$(apt list --installed 2>/dev/null | wc -l) (apt), "
    CMD_EXISTS "rpm" && PKGCOUNT="${PKGCOUNT}$(rpm -qa | wc -l) (rpm), "
    CMD_EXISTS "flatpak" && PKGCOUNT="${PKGCOUNT}$(flatpak list | wc -l) (flatpak), "
    CMD_EXISTS "snap" && PKGCOUNT="${PKGCOUNT}$(snap list | wc -l) (snap), "

    # Processor
    CORES=$(grep -c processor </proc/cpuinfo)
    CPUNAME=$(grep '^model name' /proc/cpuinfo -m 1 | sed -E 's|^model\sname\s*:\s||g')

    # Memory
    MEMTOTALKB=$(grep 'MemTotal' /proc/meminfo | sed -e 's|MemTotal:\s*||g' -e 's|\s*kB\s*||g')
    MEMFREEKB=$(grep 'MemFree' /proc/meminfo | sed -e 's|MemFree:\s*||g' -e 's|\s*kB\s*||g')

    MEMFREE=$((MEMFREEKB / 1000))
    MEMTOTAL=$((MEMTOTALKB / 1000))

    MEMORY="$MEMFREE MB / $MEMTOTAL MB"

    # Resolution
    CMD_EXISTS "xrandr" && RESOLUTION="$(xrandr -q | grep current | sed -e 's|.*current\s||g' -e 's|,.*||g')"

    # Terminal
    case "$(ps -p $(ps -p $$ o ppid=) o args= | sed 's|.*/||')" in

    *gnome-terminal*) TERMINAL="gnome-terminal" ;;
    *lxterminal*) TERMINAL="lxterminal" ;;
    *rxvt*) TERMINAL="rxvt" ;;

    esac
}

# Print out the information gathered
aboutpc.info() {
    PRINT " User@Host|${USER}@${HOST}"
    PRINT " OS|${OS}"
    PRINT " Kernel|${KERNEL}"
    PRINT " Uptime|${UPTIME}"
    PRINT " Packages|${PKGCOUNT/%, /}"
    PRINT " Shell|${SHELL}"
    PRINT " Processor|${CPUNAME}"
    PRINT " Cores|${CORES}"
    CMD_EXISTS "xrandr" && PRINT " Resolution|${RESOLUTION}"
    PRINT " Display Server|${XDG_SESSION_TYPE}"
    PRINT " Memory|${MEMORY}"
    [[ -n "${TERMINAL}" ]] && PRINT " Terminal|${TERMINAL}"
}

aboutpc.info.neofetch() {
    PRINT " OS|${OS}"
    PRINT " Kernel|${KERNEL}"
    PRINT " Uptime|${UPTIME}"
    PRINT " Packages|${PKGCOUNT/%, /}"
    PRINT " Shell|${SHELL}"
    CMD_EXISTS "xrandr" && PRINT " Resolution|${RESOLUTION}"
    PRINT " Display Server|${XDG_SESSION_TYPE}"
    PRINT " Memory|${MEMORY}"
    [[ -n "${TERMINAL}" ]] && PRINT " Terminal|${TERMINAL}"
}

aboutpc.neofetch() {
	aboutpc.fetch

	PRINT "\n${USER}@${HOST}" && \
    PRINT "---------------" && \
    aboutpc.info.neofetch | column -t -s'|' && \
    PRINT && exit 0
}

aboutpc.normal() {
	aboutpc.fetch
	# Header
	PRINT " ---------------------------------------------------------"
	PRINT "|                        About PC                         |"
	PRINT " ---------------------------------------------------------"

	# Print
	PRINT
	aboutpc.info | column -t -s "|"
	PRINT
}

_help () {
	_flags () {
		PRINT "-------------|------|---------------------"
		PRINT "Flag|Args|Description"
		PRINT "-------------|------|---------------------"
		PRINT "||"
		PRINT "--clear|n/a|Clear the screen"
		PRINT "--neofetch|n/a|Show a neofetch-esque output"
		PRINT "||"
		PRINT "-h, --help|n/a|Show this prompt"
	}

	PRINT "$(SCRIPTNAME) - Show system information for screenshots :)"
	PRINT
	PRINT "Usage:\t\t$(SCRIPTNAME) <flag?> <args?> ..."
	PRINT "Example:\t$(SCRIPTNAME)\t\t\t\t# Default $(SCRIPTNAME) output"
	PRINT "Example:\t$(SCRIPTNAME) --clear --neofetch\t# Clear screen, show neofetch-esque output"
	PRINT
	_flags | column -t -s'|'
}

# Iterate over all arguments and evaluate them
while test $# -gt 0; do

	case "$(LOWERCASE ${1})" in

		--clear ) shift; CLEAR=1 ;;
		--neofetch ) shift; NEOFETCH=1 ;;

		\? | -h | --help ) shift; _help; exit 0 ;;

		* ) PRINT "$(SCRIPTNAME): Invalid flag '${1}'." && exit 1

	esac

done

[[ $CLEAR -eq 1 ]] && clear
[[ $NEOFETCH -eq 1 ]] && aboutpc.neofetch && exit 0

aboutpc.normal

