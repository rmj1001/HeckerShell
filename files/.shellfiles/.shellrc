#!/bin/bash

################################## ENVIRONMENT #################################

# Default Editor
# (checks for each editor, if proceeding editor exists then default is changed)
[[ -f "$(command -v nano)" ]] && export EDITOR="$(command -v nano)"
[[ -f "$(command -v nvim)" ]] && export EDITOR="$(command -v nvim)"
[[ -f "$(command -v code)" ]] && export EDITOR="$(command -v code)"
[[ -f "$(command -v micro)" ]] && export EDITOR="$(command -v micro)"

# Default Browser
[[ -x "$(command -v firefox)" ]] && export BROWSER="$(command -v firefox)"

# Default Authentication
# (sudo is default, if doas exists then it becomes default)
[[ -x "$(command -v sudo)" ]] && export AUTH="$(command -v sudo)"
[[ -x "$(command -v doas)" ]] && export AUTH="$(command -v doas)"

# XDG
export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_DATA_HOME="${HOME}/.local/share"
export XDG_CACHE_HOME="${HOME}/.cache"

# Trash
export TRASH="${XDG_DATA_HOME}/Trash/files"

# Environment Variables
export LANG="en_US.UTF-8"
export SNAPS="/snap/bin"
export GNUPGHOME="${HOME}/.gnupg"
export CARGO_HOME="${XDG_DATA_HOME}/cargo" # Rust
export RUSTUP_HOME="${XDG_DATA_HOME}/rustup" # Rust
export GTK2_RC_FILES="${XDG_CONFIG_HOME}/gtk-2.0/gtkrc"
export WINEPREFIX="${XDG_DATA_HOME}/wineprefixes/default"
export XINITRC="${XDG_CONFIG_HOME}/X11/xinitrc"
export XSERVERRC="${XDG_CONFIG_HOME}/X11/xserverrc"
export ANDROID_HOME="${XDG_DATA_HOME}/android-sdk"
export MYSQL_HISTFILE="${XDG_DATA_HOME}/mysql_history"
export QT_QPA_PLATFORMTHEME="qt5ct"

# Compilation flags
export ARCHFLAGS="-arch x86_64"

# User Scripts/AppImages
export SYSTEM32="${HOME}/System32"
export SCRIPTS="${SYSTEM32}"
export BIN="${HOME}/.local/bin"
export APPIMAGES="${HOME}/Apps"

# Update PATH with script paths and AppImages
export PATH=${PATH}:${SYSTEM32}:${BIN}:${APPIMAGES}

# Developer Language Paths
export GOPATH="${XDG_DATA_HOME}/go:${HOME}/Bin/projects/golang"
export HOMEBREW="/home/linuxbrew/.linuxbrew/bin"
export DENO_INSTALL="/home/roy/.deno"

# RUST lang paths
export RUSTUP_HOME="${HOME}/.local/share/rustup"
export CARGO_HOME="${HOME}/.local/share/cargo"
export RUST_BIN="${HOME}/.local/share/cargo/bin"

# FNM (node manager)
export FNM_MULTISHELL_PATH="/tmp/fnm_multishells/36217_1631124687204"
export FNM_DIR="/home/roy/.fnm"
export FNM_LOGLEVEL="info"
export FNM_NODE_DIST_MIRROR="https://nodejs.org/dist"
export FNM_ARCH="x64"

# Conditional PATH additions (Developer Languages)
[[ -z "${RUST_BIN}" ]] || export PATH="${PATH}:${RUST_BIN}"
[[ -z "${GOPATH}" ]] || export PATH="${PATH}:${GOPATH}/bin"
[[ -z "${HOMEBREW}" ]] || export PATH="${PATH}:${HOMEBREW}"
[[ -z "${DENO_INSTALL}" ]] || export PATH="${PATH}:${DENO_INSTALL}/bin"
[[ -z "${FNM_MULTISHELL_PATH}" ]] || \
	export PATH="${PATH}:${FNM_MULTISHELL_PATH}/bin"

############################ SHELL FUNCTIONS ###################################

### Replacement for 'echo'
# usage: PRINT "text"
PRINT() { printf "%b\n" "${@}"; }

### 'echo' replacement w/o newline
# usage: NPRINT "text"
NPRINT() { printf "%b" "${@}"; }

### Pauses script execution until the user presses ENTER
# usage: PAUSE
PAUSE() { PRINT "Press <ENTER> to continue..."; read; }

### Sets the terminal window title
# usage: TITLE "test"
TITLE() { NPRINT "\033]2;${1}\a"; }

### Generate a random number from 1 to the specified maximum
# usage: RANDOM_NUM 100
RANDOM_NUM() { NPRINT "$((RANDOM % ${1} + 1))"; }

### Converts a string to all api.std.failMsg characters
# usage: name="$(LOWERCASE $name)"
LOWERCASE() { NPRINT "${1}" | tr "[:upper:]" "[:lower:]"; }

### Converts a string to all UPPERCASE characters
# usage: name="$(UPPERCASE $name)"
UPPERCASE() { NPRINT "${1}" | tr "[:lower:]" "[:upper:]"; }

### Trim all leading/trailing whitespace from a string
# usage: TRIM "   this      "
TRIM() {
	local var="$*"

	# remove leading whitespace characters
	var="${var##*( )}"

	# remove trailing whitespace characters
	var="${var%%*( )}"

	# Return trimmed string
	printf '%s' "$var";
}

### Run code silently
# usage: SILENTRUN <command>
SILENTRUN() { $@ >/dev/null 2>&1; }

### Run programs in the background in disowned processes
# usage: ASYNC '<commands>'
ASYNC() { nohup $@ > /dev/null 2>&1 & }

### Check to see if command exists
# usage: CMD_EXISTS <command>
CMD_EXISTS() { SILENTRUN command -v "${1}"; return $?; }

### Checks for a filename in $PATH (commands), if not found then exit with an error
# usage: REQUIRE_CMD "7z" "tar" || exit 1
REQUIRE_CMD() {
	NEEDED=()

	for arg in "${@}"; do
		CMD_EXISTS "${arg}" || NEEDED+=("${arg}")
	done

	[[ ${#NEEDED[@]} -lt 1 ]] && exit 0

	PRINT "The following programs are required to run this program:"
	PRINT "${NEEDED[@]}"

	return 1;
}

### Checks to see if the script is being run as root, and if not then exit.
# usage: REQUIRE_ROOT
REQUIRE_ROOT() {
	[[ ${EUID} -eq 0 ]] && exit 0
	PRINT "This script must be run as root"
	exit 1;
}

### Checks to see if the script is being run as root, and if so then exit.
# usage: DISABLE_ROOT
DISABLE_ROOT() {
	[[ ${EUID} -ne 0 ]] && exit 0
	PRINT "This script cannot be run as root. Try another user."
	exit 1;
}

### Check to see if input is 'yes' or empty
# usage: CHECK_YES <var>
# returns: return code (1 for yes/empty, 1 for no)
CHECK_YES() {
	[[ $1 =~ [yY][eE]?[sS]? ]] && return 0
	[[ -z "$1" ]] && return 0
	return 1;
}

### Check to see if input is 'no' or empty
# usage: CHECK_NO <var>
# returns: return code (0 for no/empty, 1 for yes)
CHECK_NO() {
	[[ $1 =~ [nN][oO]? ]] && return 0
	[[ -z "$1" ]] && return 0
	return 1;
}

### Download youtube videos
# usage: downloadYTVideo <video url>[]
downloadYTVideo ()
{
	# Preparations
	DIR=$HOME/Downloads/VideoDownloader; [[ -d "$DIR" ]] \
		|| mkdir "$DIR" ; cd "$DIR"

    youtube-dl --format mp4 -o "%(title)s.%(ext)s" "${@}";
}

### Download youtube videos as MP3 sound files
# usage: mp3dl <video url>[]
mp3dl ()
{
	# Preparations
	DIR=$HOME/Downloads/Music; [[ -d "$DIR" ]] || mkdir "$DIR" ; cd "$DIR"

	# Download
	youtube-dl --prefer-ffmpeg --add-metadata --output '%(title)s.%(ext)s' \
		--extract-audio --audio-format mp3 "${@}";
}

### Add sound clips to soundfx folder
# usage: soundfx <video url>[]
soundfx ()
{
	# Preparations
	DIR=$HOME/Music/SoundFX; [[ -d "$DIR" ]] || mkdir "$DIR" ; cd "$DIR"

	# Download
	youtube-dl --prefer-ffmpeg --add-metadata --output '%(title)s.%(ext)s' \
		--extract-audio --audio-format mp3 "${@}";
}

### Write a line who's length is equal to the length of the terminal's columns
# usage: write_lines
write_lines() { for ((i=0; i<${COLUMNS}; ++i)); do printf -; done; PRINT ""; }

################################ SHELL ALIASES #################################

# Edit files
alias edit="${EDITOR}"
alias rootedit="${AUTH} ${EDITOR}"

# Copy text from STDIN or from a file
alias copy="xclip -sel clip"

# Colorized grep
alias grep="grep --color=auto"

# Cat a file w/ line numbers
alias readfile="/bin/cat -n"

# Replace 'which'
alias which="command -v"

# Check if program exists (silent, use return codes)
alias CMDEXISTS="SILENTRUN command -v"

# If bat/batcat exists, create opposite alias to replace cat
if CMDEXISTS bat; then
	alias batcat="/bin/bat -p"
elif CMDEXISTS batcat; then
    alias bat="/bin/batcat -p"
fi

# Listing files/directories
alias ls="ls --color=auto --group-directories-first"
alias ll="ls -AlvhF"
alias la="ls -A"
alias l.="la | grep '^\.\w\w*$'"

# Directory manipulation
alias mkdir="mkdir -p"
alias md="mkdir"
alias mf="touch"
alias rd="rm -rf"
alias rf="rm -f"
alias rmcd="dir=${PWD}; cd .. && rm -rf ${dir}"
mkcd () { mkdir "${1}" && cd "${1}"; }

# File Permissions (Exec/Non-exec)
alias mke="chmod +x"
alias rme="chmod 644"
alias correctGPGperms="chown -R $(whoami) ~/.gnupg/;
	chmod 600 ~/.gnupg/*; chmod 700 ~/.gnupg"

# Update software from source
alias makeupdate="git pull && sudo make uninstall &&
	make clean && make && sudo make install"

# Install gaming software
alias install-gaming="pip3 install LibreGaming; PRINT
	'\n\nRun \"LibreGaming --tui\" to install gaming software.'"
alias update-gaming="pip3 install LibreGaming -U; PRINT
	'\n\nRun \"LibreGaming --tui\" to install gaming software.'"

# Home
alias home="cd ${HOME}"

# Audio
alias restart-pipewire="systemctl restart --user pipewire;
	systemctl restart --user pipewire-pulse; systemctl restart --user bluetooth"
alias restart-bluetooth="systemctl restart bluetooth.service"

# Default apps
alias terminal="${TERMINAL}"
alias browser="${BROWSER}"
alias auth="${AUTH}"

################################ SOURCES #######################################

######################################
### LANGUAGES
######################################

# NVM Variables
export NVM_DIR="${XDG_CONFIG_HOME}/nvm"
export INIT="/usr/share/nvm/init-nvm.sh"

# NVM
# load nvm
[ -s "${NVM_DIR}/nvm.sh" ] && . "${NVM_DIR}/nvm.sh"
# nvm bash completions
[ -s "$NVM_DIR/bash_completion" ] && . "${NVM_DIR}/bash_completion"
# nvm initialize
[ -e "${INIT}" ] && . "${INIT}"

# Pyenv
if [ -d "$HOME/.pyenv" ]
then
    export PYENV_ROOT="${HOME}/.pyenv"
    export PATH="${PYENV_ROOT}/bin:${PATH}"
fi

[[ `command -v pyenv` ]] && eval "$(pyenv init -)"

# Rust
[[ -e "${CARGO_HOME}/env" ]] && . "${CARGO_HOME}/env"

######################################
### PACKAGE MANAGERS
######################################

### NIX ###

nixScript="${HOME}/.nix-profile/etc/profile.d/nix.sh"

if [[ -f "${nixScript}" ]]
then
	. "${nixScript}"
fi

### HOMEBREW ###

# Prefix Locations
homePrefix=${HOME}/.linuxbrew
userPrefix=/home/linuxbrew/.linuxbrew

# Determine Homebrew Prefix
[[ -d "${homePrefix}" ]] && export BREW_PREFIX="${homePrefix}"
[[ -d "${userPrefix}" ]] && export BREW_PREFIX="${userPrefix}"

# Evaluate the homebrew prefix's shellenv if brew exists
[[ -z "${BREW_PREFIX}" ]] || eval "$(${BREW_PREFIX}/bin/brew shellenv)"

# Generated for envman. Do not edit.
[[ -s "$HOME/.config/envman/load.sh" ]] && source "$HOME/.config/envman/load.sh"

######################################
### VTE
######################################

vte="/etc/profile.d/vte.sh"

if [[ $TILIX_ID ]] || [[ $VTE_VERSION ]]; then

	[[ -f "${VTE}" ]] && . "${VTE}"

fi

