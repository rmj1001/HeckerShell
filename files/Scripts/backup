#!/usr/bin/env bash

##############################################
#   Author: RMCJ <rmichael1001@gmail.com>
#   Project: backup
#   Version: 1.0
#
#   Usage:
#
#   Description:
#		Backup files
##############################################

##############################################
# PRE-PROCESSING

# shellcheck disable=SC1091
source "${SCRIPTS:=$HOME/.local/bin}"/00-api.sh

DISABLE_ROOT || exit 1

##############################################
# HELP MENU BUILDER

SCRIPT_VERSION="1.5"
SCRIPT_DESCRIPTION="Create Backups of your HOME directory"
SCRIPT_USAGE="[FLAG] [directory]? ..."

# Examples
EXAMPLE "-t /mnt/drive" "Create a tarball backup of HOME in /mnt/drive"

# Flags
FLAG "-t" "" "(Default) Uses tar to backup your files"
FLAG "-r" "" "Uses rsync to backup your files"
FLAG "-c" "" "Uses cp to backup your files (no exclusions)"

##############################################
# MAIN LOGIC

### Variables ###
exclusions="${HOME}/.backup_exclusions"
method="tar"
dir="$PWD"
ARGS=("$@")

[[ $# -eq 0 ]] && {
	HELP
	exit 0
}

### Flags ###
for (( i=0; i<${#ARGS[@]}; i++ ));
do
  arg="${ARGS[i]}"

  case "$(LOWERCASE "$arg")" in
	  -r)
		  method="rsync"
		  unset 'ARGS[i]'
		  ;;

	  -t)
		  method="tar"
		  unset 'ARGS[i]'
		  ;;

	  -c)
		  method="cp"
		  unset 'ARGS[i]'
		  ;;
    \? | -h | --help)
      HELP
      exit 0
		  ;;
	esac
done

################################################################################
# RESTORE CODE LOGIC
################################################################################

clear

# If a directory argument was passed, use it in config.
[[ -n "$1" ]] && dir="$1"

# If the directory doesn't exist, throw an error and exit
[[ ! -d "${dir}" ]] && PRINT "Invalid destination directory!\n" && PAUSE && clear && exit 1

# Cleanly exit backup process
trap 'clear; PRINT "Backup Terminated."; PAUSE; clear; exit 0' SIGTERM SIGINT

case "${method}" in
  tar)
	  target="${dir}/${USER}_$(date +m%m-d%d-y%y).tar.gz"

	  # Check if tar exists
	  REQUIRE_CMD "tar" || return 1

	  # Remove duplicate backup
	  [[ -f "${target}" ]] && PRINT "Removing duplicate backup..." && rm -rf "${target}"

	  # Confirmation
	  PRINT "Backing up with tar..."

	  # Backups up files, with exclusions if file exists, or without exclusions if no file exists.
	  [[ -f "${exclusions}" ]] && tar -zcvpf "${target}" -X "${exclusions}" "${HOME}"
	  [[ ! -f "${exclusions}" ]] && tar -zcvpf "${target}" "${HOME}"

	  ;;
  rsync)
	  target="${dir}/${USER}_$(date +m%m-d%d-y%y)"

	  # Check if rsync exists
	  REQUIRE_CMD "rsync"

	  # Remove duplicate backup
	  [[ -d "${target}" ]] && PRINT "Removing duplicate backup..." && rm -rf "${target}"

	  # Confirmation
	  PRINT "Backing up with rsync..."

	  # Backup all files
	  [[ -f "${exclusions}" ]] && rsync -arzvhP --exclude-from="${exclusions}" "${HOME}/" "${target}"
	  [[ ! -f "${exclusions}" ]] && rsync -arzvhP "${HOME}/" "${target}"

	  ;;
  cp)
	  target="${dir}/${USER}_$(date +m%m-d%d-y%y)"

	  # Check if rsync exists
	  REQUIRE_CMD "cp"

	  # Remove duplicate backup
	  [[ -d "${target}" ]] && PRINT "Removing duplicate backup..." && rm -rf "${target}"

	  # Confirmation
	  PRINT "Backing up with cp..."

	  # Backup all files
	  cp -vR "${HOME}" "${target}"

	  ;;
  *)
    PRINT "Invalid method '${method}'."
    exit 1
    ;;
esac

# Confirmation
PRINT "\n\nBackup finished."
PAUSE
clear
