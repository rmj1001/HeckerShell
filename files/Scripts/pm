#!/bin/bash

#  ██╗  ██╗███████╗ ██████╗██╗  ██╗███████╗██████╗ ███████╗██╗  ██╗███████╗██╗     ██╗
#  ██║  ██║██╔════╝██╔════╝██║ ██╔╝██╔════╝██╔══██╗██╔════╝██║  ██║██╔════╝██║     ██║
#  ███████║█████╗  ██║     █████╔╝ █████╗  ██████╔╝███████╗███████║█████╗  ██║     ██║
#  ██╔══██║██╔══╝  ██║     ██╔═██╗ ██╔══╝  ██╔══██╗╚════██║██╔══██║██╔══╝  ██║     ██║
#  ██║  ██║███████╗╚██████╗██║  ██╗███████╗██║  ██║███████║██║  ██║███████╗███████╗███████╗
#  ╚═╝  ╚═╝╚══════╝ ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝
#

##############################################
# PRE-PROCESSING

# shellcheck disable=SC1091
source "${SCRIPTS:=$HOME/.local/bin}"/00-api.sh

DISABLE_ROOT || exit 1

##############################################
# HELP MENU BUILDER

SCRIPT_VERSION="1.5"
SCRIPT_DESCRIPTION="Package manager wrapper for multiple distros"
SCRIPT_USAGE="[FLAGS] [ARGS?] ..."

# Examples
EXAMPLE "--install htop firefox"

# Flags
FLAG "install" "[PACAKGES] ..." "Install packages"
FLAG "uninstall" "[PACKAGES] ..." "Uninstall packages"
FLAG "update" "" "Update all packages"
FLAG "check-update" "" "Check for updates"
FLAG "search" "[NAME]" "Search for a package"
FLAG "list" "" "List all installed packages"
FLAG "" "" ""
FLAG "-s, --supported" "" "Print list of supported package managers"

##############################################
# MAIN LOGIC

function pm.supported() {
	PRINT
	PRINT "- apt"
	PRINT "- dnf"
	PRINT "- paru"
	PRINT "- pacman"
	PRINT
	PRINT "PMs are listed top-down in order of priority; if multiple exist,"
	PRINT "the one with greater priority will be used."
	return 0
}

function pm.install() {
	local packages="${@}"

	CMD_EXISTS "apt" && {
		sudo apt install "${@}"
		return $?
	}
	CMD_EXISTS "dnf" && {
		sudo dnf install "${@}"
		return $?
	}
	CMD_EXISTS "paru" && {
		paru -S "${@}"
		return $?
	}
	CMD_EXISTS "pacman" && {
		sudo pacman -S "${@}"
		return $?
	}
}

function pm.uninstall() {
	local packages="${@}"

	CMD_EXISTS "apt" && {
		sudo apt remove "${@}"
		return $?
	}
	CMD_EXISTS "dnf" && {
		sudo dnf remove "${@}"
		return $?
	}
	CMD_EXISTS "paru" && {
		paru -Rns "${@}"
		return $?
	}
	CMD_EXISTS "pacman" && {
		sudo pacman -Rns "${@}"
		return $?
	}
}

function pm.update() {
	CMD_EXISTS "apt" && {
		sudo apt update && sudo apt upgrade
		return $?
	}
	CMD_EXISTS "dnf" && {
		sudo dnf update
		return $?
	}
	CMD_EXISTS "paru" && {
		paru -Syu
		return $?
	}
	CMD_EXISTS "pacman" && {
		sudo pacman -Syu
		return $?
	}
}

function pm.check-update() {
	CMD_EXISTS "apt" && {
		sudo apt update
		return $?
	}
	CMD_EXISTS "dnf" && {
		sudo dnf check-update
		return $?
	}
	CMD_EXISTS "paru" && {
		paru -Sy
		return $?
	}
	CMD_EXISTS "pacman" && {
		sudo pacman -Sy
		return $?
	}
}

function pm.search() {
	local query="${@}"

	CMD_EXISTS "apt" && {
		apt search "${query}"
		return $?
	}
	CMD_EXISTS "dnf" && {
		dnf search "${query}"
		return $?
	}
	CMD_EXISTS "paru" && {
		paru -Ss "${query}"
		return $?
	}
	CMD_EXISTS "pacman" && {
		pacman -Ss "${query}"
		return $?
	}
}

function pm.list() {
	CMD_EXISTS "apt" && {
		apt list --installed
		return $?
	}
	CMD_EXISTS "dnf" && {
		dnf list --installed
		return $?
	}
	CMD_EXISTS "paru" && {
		paru -Q
		return $?
	}
	CMD_EXISTS "pacman" && {
		pacman -Q
		return $?
	}
}

# If no arguments are give, just show help prompt.
[[ $# -eq 0 ]] && {
	HELP
	exit 0
}

# Iterate over all arguments and evaluate them
while [[ $# -gt 0 ]]; do

	case "$(LOWERCASE "${1}")" in

	install)
		shift
		pm.install "${@}"
		exit $?
		;;

	uninstall)
		shift
		pm.uninstall "${@}"
		exit $?
		;;

	update)
		shift
		pm.update
		exit $?
		;;

	check-update)
		shift
		pm.check-update
		exit $?
		;;

	search)
		shift
		pm.search "${@}"
		exit $?
		;;

	list)
		shift
		pm.list
		exit $?
		;;

	-s | --supported)
		shift
		pm.supported
		exit $?
		;;

	\? | -h | --help)
		shift
		HELP
		exit 0
		;;

	*) INVALID_CMD "${1}" && exit 1 ;;

	esac

done
