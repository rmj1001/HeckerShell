#!/usr/bin/env bash

##############################################
#	Author: RMCJ <rmichael1001@gmail.com>
#	Project: bootableusb
#	Version: 1.0
#
#	Usage: bootableusb <iso> <disk>
#
#	Description:
#		Create a bootable USB drive from an
#		ISO file
##############################################

##############################################
# PRE-PROCESSING

# shellcheck disable=SC1091
source "${SCRIPTS:=$HOME/.local/bin}"/00-api.sh

DISABLE_ROOT || exit 1

##############################################
# HELP MENU BUILDER

SCRIPT_VERSION="1.5"
SCRIPT_DESCRIPTION="Create a bootable USB drive"
SCRIPT_USAGE="[FLAG] [ARGS]? ..."

# Examples
EXAMPLE "--iso <iso path> --drive <drive path>"

# Flags
FLAG "-f, --format" "" "Format the drive as FAT32"
FLAG "-i, --iso" "<iso path>" "The ISO to burn (required)"
FLAG "-d, --disk" "<disk path>" "The USB to make bootable (required)"

##############################################
# MAIN LOGIC

FORMAT=0

function bootableusb.format() {
	sudo dd if=/dev/zero of="${DISK}" bs=512 count=1
	sync
}

function bootableusb.write() {
	REQUIRE_CMD "pv" || exit 1
	sudo -- bash -c "cat ${ISO} | pv > ${DISK}"
	sync
}

[[ $# -eq 0 ]] && HELP

while [[ $# -gt 0 ]]; do
	case "$1" in
	-h | --help | \?)
		shift
		HELP
		;;
	-i | --iso)
		shift

		[[ -z "${1}" ]] && PRINT "$(SCRIPTNAME): You must provide an ISO path. Use '--help' for more info." && continue
		ISO="$(realpath "${1}")"

		shift
		;;
	-d | --disk)
		shift

		[[ -z "${1}" ]] && PRINT "$(SCRIPTNAME): You must provide a disk path. Use '--help' for more info." && continue
		DISK="$(realpath "${1}")"

		shift
		;;
	-f | --format)
		shift
		FORMAT=1
		;;
	*)
		PRINT "$(SCRIPTNAME): '$1' is not a recognized flag!"
		exit 1
		;;
	esac
done

# Detect if ISO or disk are provided
[[ -z "${ISO}" || -z "${DISK}" ]] && PRINT "$(SCRIPTNAME): You must provide both an ISO and disk. See '--help' for more info." && exit 1

# Grab ISO path, determine if it's valid, exit if not.
[[ ! ${ISO} =~ .*\.iso ]] && PRINT "Invalid ISO" && exit 1
[[ ! -e "${ISO}" ]] && PRINT "ISO '${1}' does not exist." && exit 1

# Grab disk path, determine if it's valid, exit if not.
[[ ! ${DISK} =~ \/dev\/.* ]] && PRINT "Invalid disk" && exit 1
[[ ! -e "${DISK}" ]] && PRINT "Disk '${2}' does not exist." && exit 1

# Unmount, format (if specified), write
sudo umount -R "${DISK}"
[[ $FORMAT -eq 1 ]] && bootableusb.format
bootableusb.write
