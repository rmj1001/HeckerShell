#!/bin/bash

#  ██╗  ██╗███████╗ ██████╗██╗  ██╗███████╗██████╗ ███████╗██╗  ██╗███████╗██╗     ██╗
#  ██║  ██║██╔════╝██╔════╝██║ ██╔╝██╔════╝██╔══██╗██╔════╝██║  ██║██╔════╝██║     ██║
#  ███████║█████╗  ██║     █████╔╝ █████╗  ██████╔╝███████╗███████║█████╗  ██║     ██║
#  ██╔══██║██╔══╝  ██║     ██╔═██╗ ██╔══╝  ██╔══██╗╚════██║██╔══██║██╔══╝  ██║     ██║
#  ██║  ██║███████╗╚██████╗██║  ██╗███████╗██║  ██║███████║██║  ██║███████╗███████╗███████╗
#  ╚═╝  ╚═╝╚══════╝ ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝
#

##############################################
# PRE-PROCESSING

# shellcheck disable=SC1091
source "${SCRIPTS:=$HOME/.local/bin}"/00-api.sh

DISABLE_ROOT || exit 1

##############################################
# HELP MENU BUILDER

SCRIPT_VERSION="1.5"
SCRIPT_DESCRIPTION="Manage your trash bin"
SCRIPT_USAGE="[FLAGS] [ARGS?] ..."
SCRIPT_EXAMPLE="--add /home/user/Documents/example.pdf"

# Examples
EXAMPLE "--add ./example.pdf ./Music/ring.mp3" "Add multiple files to trash"

# Flags
FLAG "-a, --add" "[FILES]" "Add file to trash bin"
FLAG "-r, --restore" "[FILES]" "Restore files from the trash bin"
FLAG "-e, --empty" "" "Permanently delete everything in the trash bin"
FLAG "-i, --info" "[FILE]" "Print the trash file's metadata"
FLAG "-l, --list" "" "List the contents of the trash bin"

##############################################
# MAIN LOGIC

declare -- TRASHINFO
declare -- FILENAME
declare -- FILEINFO
declare -- DELPATH
declare -- DELDATE
declare -- FILEPATH
declare -- FILEINFO
declare -- RESTOREPATH

TRASHDIRS=$HOME/.local/share/Trash
TRASHINFO=$TRASHDIRS/info
TRASH=$TRASHDIRS/files

function trash.file.check() {
  [[ -n "${1}" ]] && FILE="${1}" && return 0

  PRINT "You must specify a FILE."
  return 1
}

function trash.getPath() {
  confFile="${1}"
  PRINT "$(grep -m 1 Path= "${confFile}" | sed 's|Path=||')"
}

function trash.getDate() {
  confFile="${1}"
  PRINT "$(grep -m 1 DeletionDate= "${confFile}" | sed 's|DeletionDate=||')"
}

function trash.files.add() {
  while [[ $# -gt 0 ]]; do

    trash.file.check "$1" || {
      shift
      continue
    }

    [[ -e "${FILE}" ]] || {
      PRINT "File '${FILE}' doesn't exist."
      shift
      continue
    }

    FILENAME="$(basename "${FILE}")"
    DELPATH=$(readlink -f "${FILE}")
    DELDATE=$(date +"%Y-%m-%dT%H:%M:%S")

    PRINT "[Trash Info]" >"${TRASHINFO}/${FILENAME}.trashinfo"
    PRINT "Path=${DELPATH}" >>"${TRASHINFO}/${FILENAME}.trashinfo"
    PRINT "DeletionDate=${DELDATE}" >>"${TRASHINFO}/${FILENAME}.trashinfo"
    mv "${FILE}" "${TRASH}"

    PRINT "Moved ${FILE} to the trash!"
    shift
  done
}

function trash.files.restore() {
  while [[ $# -gt 0 ]]; do

    trash.file.check "$1" || {
      shift
      continue
    }

    FILEPATH="${TRASH}/${FILE}"
    FILEINFO="${TRASHINFO}/${FILE}.trashinfo"

    [[ -f "${FILEINFO}" && -e "${FILEPATH}" ]] || {
      PRINT "File '${FILE}' is not in the trash."
      shift
      continue
    }

    RESTOREPATH="$(trash.getPath "${FILEINFO}")"

    mv "${FILEPATH}" "${RESTOREPATH}"
    rm -f "${FILEINFO}"

    PRINT "Restored ${FILE} to ${RESTOREPATH}!"

    shift
  done
}

function trash.files.empty() {
  cd "${TRASH}" && SILENTRUN rm -rf ./*
  cd "${TRASHINFO}" && SILENTRUN rm -rf ./*

  PRINT "Trash emptied!"
  return 0
}

function trash.files.information() {
  trash.file.check "$1"

  FILEINFO=$TRASHINFO/"${FILE}.trashinfo"

  [[ -e "${FILEINFO}" ]] ||
    PRINT "File '${FILE}' doesn't have metadata or doesn't exist."

  cat "${FILEINFO}"
  return 0
}

[[ $# -eq 0 ]] && {
  HELP
  exit 0
}

while [[ $# -gt 0 ]]; do
  case "$(LOWERCASE "${1}")" in

  -a | --add)
    shift
    trash.files.add "${@}"
    exit 0
    ;;
  -r | --restore)
    shift
    trash.files.restore "${@}"
    exit 0
    ;;
  -e | --empty)
    shift
    trash.files.empty
    ;;
  -l | --list)
    shift
    ls --color=auto -AlvhF --group-directories-first "${TRASH}"
    ;;
  -i | --info)
    shift
    trash.files.information "${2}"
    ;;
  \? | h | help)
    shift
    HELP
    exit 0
    ;;
  *)
    INVALID_CMD "${1}"
    exit 1
    ;;

  esac
done
