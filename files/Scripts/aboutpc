#!/usr/bin/env bash

##############################################
#	Author: RMCJ <rmichael1001@gmail.com>
#	Project: aboutpc
#	Version: 1.0
#
#	Usage: aboutpc
#
#	Description:
#		Retrieve system information for use in screenshots
##############################################

# shellcheck disable=SC1091
source "${SCRIPTS:=$HOME/.local/bin}"/00-api.sh

# Preprocessor flags
DISABLE_ROOT || exit 1
REQUIRE_CMD "grep" "sed" "uname" "cat" || exit 1

####################################

function _fetch_sysinfo() {
	# Operating System Information
	OS="$(grep '^NAME=' /etc/os-release | sed 's/NAME=//;s/"//g')"
	OS="${OS} $(grep '^VERSION=' /etc/os-release | sed 's/VERSION=//;s/"//g')"

	# Host, Kernel, and Uptime Information
	HOST="$(uname -n)"
	KERNEL="$(uname -r)"
	UPTIME=$(uptime --pretty | sed 's|^up\s||')

	# Package count
	PKGCOUNT=""
	CMD_EXISTS "pacman" && PKGCOUNT="${PKGCOUNT}$(pacman -Qq | wc -l) (pacman), "
	CMD_EXISTS "apt" && PKGCOUNT="${PKGCOUNT}$(apt list --installed 2>/dev/null | wc -l) (apt), "
	CMD_EXISTS "rpm" && PKGCOUNT="${PKGCOUNT}$(rpm -qa | wc -l) (rpm), "
	CMD_EXISTS "flatpak" && PKGCOUNT="${PKGCOUNT}$(flatpak list | wc -l) (flatpak), "
	CMD_EXISTS "snap" && PKGCOUNT="${PKGCOUNT}$(snap list | wc -l) (snap), "
	PKGCOUNT="${PKGCOUNT/%, /}"

	# Processor
	CORES=$(grep -c processor </proc/cpuinfo)
	CPUNAME=$(grep '^model name' /proc/cpuinfo -m 1 | sed -E 's|^model\sname\s*:\s||g')

	# Memory
	MEMFREE=$(($(grep 'MemFree' /proc/meminfo | sed -e 's|MemFree:\s*||g' -e 's|\s*kB\s*||g') / 1000))
	MEMTOTAL=$(($(grep 'MemTotal' /proc/meminfo | sed -e 's|MemTotal:\s*||g' -e 's|\s*kB\s*||g') / 1000))

	MEMORY="${MEMFREE} MB / ${MEMTOTAL} MB"

	# Resolution
	CMD_EXISTS "xrandr" && RESOLUTION="$(xrandr -q | grep current | sed -e 's|.*current\s||g' -e 's|,.*||g')"
}

function _zenity() {
	REQUIRE_CMD "zenity" || return 1

	_fetch_sysinfo

	zenity --title "About PC" --height 500 --width 450 --list \
		--column "Category" --column "Information" \
		"User@Host" "${USER}@${HOST}" \
		"OS" "${OS}" \
		"Kernel" "${KERNEL}" \
		"Uptime" "${UPTIME}" \
		"Packages" "${PKGCOUNT}" \
		"Shell" "${SHELL}" \
		"Processor" "${CPUNAME}" \
		"Cores" "${CORES}" \
		"Display Server" "${XDG_SESSION_TYPE}" \
		"Memory" "${MEMORY}" \
		"Time" "$(TIMESTAMP)" &
	return 0
}

function _neofetch() {
	_fetch_sysinfo

	# Header
	PRINT "\n${USER}@${HOST}"
	PRINT "---------------------------------------------------------"
	{
		PRINT " OS|${OS}"
		PRINT " Kernel|${KERNEL}"
		PRINT " Uptime|${UPTIME}"
		PRINT " Packages|${PKGCOUNT}"
		PRINT " Shell|${SHELL}"
		CMD_EXISTS "xrandr" && PRINT " Resolution|${RESOLUTION}"
		PRINT " Display Server|${XDG_SESSION_TYPE}"
		PRINT " Memory|${MEMORY}"
		[[ -n "${TERMINAL}" ]] && PRINT " Terminal|${TERMINAL}"
		PRINT " Time|$(TIMESTAMP)"
	} | column -t -s'|'

	PRINT
}

function _default() {
	_fetch_sysinfo

	# Header
	PRINT " ---------------------------------------------------------"
	PRINT "|                        About PC                         |"
	PRINT " ---------------------------------------------------------"
	PRINT
	{
		PRINT " User@Host|${USER}@${HOST}"
		PRINT " OS|${OS}"
		PRINT " Kernel|${KERNEL}"
		PRINT " Uptime|${UPTIME}"
		PRINT " Packages|${PKGCOUNT/%, /}"
		PRINT " Shell|${SHELL}"
		PRINT " Processor|${CPUNAME}"
		PRINT " Cores|${CORES}"
		CMD_EXISTS "xrandr" && PRINT " Resolution|${RESOLUTION}"
		PRINT " Display Server|${XDG_SESSION_TYPE}"
		PRINT " Memory|${MEMORY}"
		[[ -n "${TERMINAL}" ]] && PRINT " Terminal|${TERMINAL}"
		PRINT " Time|$(TIMESTAMP)"
	} | column -t -s "|"

	PRINT
}

function _help() {
	PRINT "$(SCRIPTNAME) - Show system information for screenshots :)"
	PRINT
	PRINT "Usage:\t\t$(SCRIPTNAME) [FLAGS] [ARGS?] ..."
	PRINT "Example:\t$(SCRIPTNAME)\t\t\t\t# Default $(SCRIPTNAME) output"
	PRINT "Example:\t$(SCRIPTNAME) --clear --neofetch\t# Clear screen, show neofetch-esque output"
	PRINT
	{
		PRINT "-------------|------|---------------------"
		PRINT "Flag|Args|Description"
		PRINT "-------------|------|---------------------"
		PRINT "||"
		PRINT "-d, --default|n/a|Show the default output"
		PRINT "-n, --neofetch|n/a|Show a neofetch-esque output"
		PRINT "-z, --zenity|n/a|Print information to a graphical window"
		PRINT "||"
		PRINT "-h, --help|n/a|Show this prompt"
	} | column -t -s'|'
}

# Iterate over all arguments and evaluate them
while [[ $# -gt 0 ]]; do

	case "$(LOWERCASE "${1}")" in
	-d | --default)
		shift
		_default && exit 0
		;;
	-n | --neofetch)
		shift
		_neofetch && exit 0
		;;
	-z | --zenity)
		shift
		_zenity && exit 0
		;;

	\? | -h | --help)
		shift
		_help
		exit 0
		;;

	*)
		INVALID_CMD "${1}" && exit 1
		;;

	esac

done

_default
