#!/usr/bin/env bash

##############################################
#	Author: RMCJ <rmichael1001@gmail.com>
#	Project: aboutpc
#	Version: 1.0
#
#	Usage: aboutpc
#
#	Description:
#		Retrieve system information for use in screenshots
##############################################

##############################################
# PRE-PROCESSING

# shellcheck disable=SC1091
source "${SCRIPTS:=$HOME/.local/bin}"/00-api.sh

DISABLE_ROOT || exit 1
REQUIRE_CMD "grep" "sed" "uname" "cat" || exit 1

##############################################
# HELP MENU BUILDER

SCRIPT_VERSION="1.5"
SCRIPT_DESCRIPTION="Show information about your system."
SCRIPT_USAGE="[FLAG]?"

# Examples
EXAMPLE "--default" "Show default layout"

# Flags
FLAG "-d, --default" "" "Print default layout to CLI"
FLAG "-n, --neofetch" "" "Print neofetch-like layout to CLI"
FLAG "-z, --zenity" "" "Output information to GUI instead"

##############################################
# MAIN LOGIC

function aboutpc.fetchInfo() {
	# Operating System Information
	OS="$(grep '^NAME=' /etc/os-release | sed 's/NAME=//;s/"//g')"
	OS="${OS} $(grep '^VERSION=' /etc/os-release | sed 's/VERSION=//;s/"//g')"

	# Host, Kernel, and Uptime Information
	HOST="$(uname -n)"
	KERNEL="$(uname -r)"
	UPTIME=$(uptime --pretty | sed 's|^up\s||')

	# Package count
	PKGCOUNT=""
	CMD_EXISTS "pacman" && PKGCOUNT="${PKGCOUNT}$(pacman -Qq | wc -l) (pacman), "
	CMD_EXISTS "apt" && PKGCOUNT="${PKGCOUNT}$(apt list --installed 2>/dev/null | wc -l) (apt), "
	CMD_EXISTS "rpm" && PKGCOUNT="${PKGCOUNT}$(rpm -qa | wc -l) (rpm), "
	CMD_EXISTS "flatpak" && PKGCOUNT="${PKGCOUNT}$(flatpak list | wc -l) (flatpak), "
	CMD_EXISTS "snap" && PKGCOUNT="${PKGCOUNT}$(snap list | wc -l) (snap), "
	PKGCOUNT="${PKGCOUNT/%, /}"

	# Processor
	CORES=$(grep -c processor </proc/cpuinfo)
	CPUNAME=$(grep '^model name' /proc/cpuinfo -m 1 | sed -E 's|^model\sname\s*:\s||g')

	# Memory
	MEMFREE=$(($(grep 'MemFree' /proc/meminfo | sed -e 's|MemFree:\s*||g' -e 's|\s*kB\s*||g') / 1000))
	MEMTOTAL=$(($(grep 'MemTotal' /proc/meminfo | sed -e 's|MemTotal:\s*||g' -e 's|\s*kB\s*||g') / 1000))

	MEMORY="${MEMFREE} MB / ${MEMTOTAL} MB"

	# Resolution
	CMD_EXISTS "xrandr" && RESOLUTION="$(xrandr -q | grep current | sed -e 's|.*current\s||g' -e 's|,.*||g')"
}

function aboutpc.zenity() {
	REQUIRE_CMD "zenity" || return 1

	aboutpc.fetchInfo

	zenity --title "About PC" --height 500 --width 450 --list \
		--column "Category" --column "Information" \
		"User@Host" "${USER}@${HOST}" \
		"OS" "${OS}" \
		"Kernel" "${KERNEL}" \
		"Uptime" "${UPTIME}" \
		"Packages" "${PKGCOUNT}" \
		"Shell" "${SHELL}" \
		"Processor" "${CPUNAME}" \
		"Cores" "${CORES}" \
		"Display Server" "${XDG_SESSION_TYPE}" \
		"Memory" "${MEMORY}" \
		"Time" "$(TIMESTAMP)" &
	return 0
}

function aboutpc.neofetch() {
	aboutpc.fetchInfo

	# Header
	PRINT "\n${USER}@${HOST}"
	PRINT "---------------------------------------------------------"
	{
		PRINT " OS|${OS}"
		PRINT " Kernel|${KERNEL}"
		PRINT " Uptime|${UPTIME}"
		PRINT " Packages|${PKGCOUNT}"
		PRINT " Shell|${SHELL}"
		CMD_EXISTS "xrandr" && PRINT " Resolution|${RESOLUTION}"
		PRINT " Display Server|${XDG_SESSION_TYPE}"
		PRINT " Memory|${MEMORY}"
		[[ -n "${TERMINAL}" ]] && PRINT " Terminal|${TERMINAL}"
		PRINT " Time|$(TIMESTAMP)"
	} | column -t -s'|'

	PRINT
}

function aboutpc.default() {
	aboutpc.fetchInfo

	# Header
	PRINT " ---------------------------------------------------------"
	PRINT "|                        About PC                         |"
	PRINT " ---------------------------------------------------------"
	PRINT
	{
		PRINT " User@Host|${USER}@${HOST}"
		PRINT " OS|${OS}"
		PRINT " Kernel|${KERNEL}"
		PRINT " Uptime|${UPTIME}"
		PRINT " Packages|${PKGCOUNT/%, /}"
		PRINT " Shell|${SHELL}"
		PRINT " Processor|${CPUNAME}"
		PRINT " Cores|${CORES}"
		CMD_EXISTS "xrandr" && PRINT " Resolution|${RESOLUTION}"
		PRINT " Display Server|${XDG_SESSION_TYPE}"
		PRINT " Memory|${MEMORY}"
		[[ -n "${TERMINAL}" ]] && PRINT " Terminal|${TERMINAL}"
		PRINT " Time|$(TIMESTAMP)"
	} | column -t -s "|"

	PRINT
}

# Iterate over all arguments and evaluate them
while [[ $# -gt 0 ]]; do

	case "$(LOWERCASE "${1}")" in
	-d | --default)
		shift
		aboutpc.default && exit 0
		;;
	-n | --neofetch)
		shift
		aboutpc.neofetch && exit 0
		;;
	-z | --zenity)
		shift
		aboutpc.zenity && exit 0
		;;

	\? | -h | --help)
		shift
		HELP
		exit 0
		;;

	*)
		INVALID_CMD "${1}"
		exit 1
		;;

	esac

done

aboutpc.default
