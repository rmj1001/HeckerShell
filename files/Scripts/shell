#!/usr/bin/env bash

#  ██╗  ██╗███████╗ ██████╗██╗  ██╗███████╗██████╗ ███████╗██╗  ██╗███████╗██╗     ██╗
#  ██║  ██║██╔════╝██╔════╝██║ ██╔╝██╔════╝██╔══██╗██╔════╝██║  ██║██╔════╝██║     ██║
#  ███████║█████╗  ██║     █████╔╝ █████╗  ██████╔╝███████╗███████║█████╗  ██║     ██║
#  ██╔══██║██╔══╝  ██║     ██╔═██╗ ██╔══╝  ██╔══██╗╚════██║██╔══██║██╔══╝  ██║     ██║
#  ██║  ██║███████╗╚██████╗██║  ██╗███████╗██║  ██║███████║██║  ██║███████╗███████╗███████╗
#  ╚═╝  ╚═╝╚══════╝ ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝
#

##############################################
# PRE-PROCESSING

# shellcheck disable=SC1091
source "${SCRIPTS:=$HOME/.local/bin}"/00-api.sh

DISABLE_ROOT || exit 1

##############################################
# HELP MENU BUILDER

VERSION "1.5"
DESCRIPTION "Manage the shell configuration"
USAGE "[FLAG] [directory]? ..."

# Flags
FLAG "reload" "" "Reload shell configs"
FLAG "fresh-screen" "" "Clear screen and print MOTD"
FLAG "lines" "" "Print a line across the screen"
FLAG "motd" "" "Print or manage the MOTD. See '${0##*/} motd --help'."
FLAG "" "" ""
FLAG "update" "" "Update this shell"
FLAG "clean-update" "" "Uninstall & Re-install this shell"
FLAG "uninstall" "Uninstall this shell"

##############################################
# MAIN LOGIC

# HeckerShell urls
export HECKERSHELL_SITE_HTTPS="https://github.com/rmj1001/HeckerShell.git"
export HECKERSHELL_SITE_SSH="git@github.com:rmj1001/HeckerShell.git"
export HECKERSHELL_SITE="${HECKERSHELL_SITE_HTTPS}"

# HeckerShell directories
export HECKERSHELL_DOWN_DIR="${HOME}/.local/share"
export HECKERSHELL_DIR="${HECKERSHELL_DOWN_DIR}/HeckerShell"
export HECKERSHELL="${HECKERSHELL_DIR}/files"

# OG Paths
export SYM_ZSHRC="${HECKERSHELL}/.zshrc"
export SYM_BASHRC="${HECKERSHELL}/.bashrc"
export SYM_SHELLFILES="${HECKERSHELL}/.shellfiles"
export SYM_SCRIPTS="${HECKERSHELL}/Scripts"

# Paths
export ZSHRC="${HOME}/.zshrc"
export BASHRC="${HOME}/.bashrc"
export SHELLFILES="${HOME}/.shellfiles"
export SCRIPTS="${HOME}/Scripts"

# Checks to see an input matches case-insensitive 'yes'
isYes() {
  echo "$1" | grep '^[yY][eE]?[sS]?$' && return 0
  return 1
}

### Reload shell files and present fresh screen.
# Usage: shell reload
shell_reload() {
  exec "$(basename "${SHELL}")"
}

### Write lines to terminal (full width of screen)
# Usage: shell lines
shell_lines() {
  printf %"$COLUMNS"s | tr " " "-"
}

# Print custom MOTD to terminal
# Usage: shell motd
shell_motd() {
  PRINT
  PRINT "██╗  ██╗███████╗ ██████╗██╗  ██╗███████╗██████╗ ███████╗██╗  ██╗███████╗██╗     ██╗     "
  PRINT "██║  ██║██╔════╝██╔════╝██║ ██╔╝██╔════╝██╔══██╗██╔════╝██║  ██║██╔════╝██║     ██║     "
  PRINT "███████║█████╗  ██║     █████╔╝ █████╗  ██████╔╝███████╗███████║█████╗  ██║     ██║     "
  PRINT "██╔══██║██╔══╝  ██║     ██╔═██╗ ██╔══╝  ██╔══██╗╚════██║██╔══██║██╔══╝  ██║     ██║     "
  PRINT "██║  ██║███████╗╚██████╗██║  ██╗███████╗██║  ██║███████║██║  ██║███████╗███████╗███████╗"
  PRINT "╚═╝  ╚═╝╚══════╝ ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝"
  PRINT "                                                                                        "
}

### Clear screen and print motd
# Usage: shell freshscreen
shell_freshscreen() {
  clear
  shell_motd
  [ "${SHELL}" = "/bin/zsh" ] && PRINT ""
}

shell_install() {
  # Check if Git is installed.
  [ ! -x "$(command -v git)" ] &&
    PRINT "Git is not installed." && {
    sleep 0.5
    exit 1
  }

  # Confirm installation
  printf "%b" "Are you sure you want to install this? (y/N) "
  read -r confirm

  isYes "${confirm}" || {
    PRINT "Cancelling."

    sleep 0.5
    exit 1
  }

  # Check if HeckerShell exist
  [ -d "${HECKERSHELL_DIR}" ] && {
    PRINT "HeckerShell directory exists. Try using the update script."
    PRINT "Exiting..."

    sleep 0.5
    exit 1
  }

  # If user wishes to contribute, use SSH
  sleep 0.5
  printf "%b" "Will you be contributing to HeckerShell? (y/N) "
  read -r contrib

  isYes "${contrib}" && HECKERSHELL_SITE="${HECKERSHELL_SITE_SSH}"

  # Download HeckerShell
  sleep 0.5
  PRINT "Downloading HeckerShell..."
  cd "${HECKERSHELL_DOWN_DIR}" || exit 1
  git clone "${HECKERSHELL_SITE}"

  # Install scripts
  sleep 0.5
  PRINT "Installing scripts..."
  SYM "${SYM_SCRIPTS}" "${SCRIPTS}"

  # Install shellfiles
  sleep 0.5
  PRINT "Installing shell configs..."
  rm -f "${ZSHRC}" && SYM "${SYM_ZSHRC}" "${ZSHRC}" && sleep 0.5
  rm -f "${BASHRC}" && SYM "${SYM_BASHRC}" "${BASHRC}" && sleep 0.5
  SYM "${SYM_SHELLFILES}" "${SHELLFILES}" && sleep 0.5

  # Remove rogue symlinks
  sleep 0.5
  PRINT "Removing rogue symlinks..."
  [ -L "${SHELLFILES}/.shellfiles" ] && rm -f "${SHELLFILES}/.shellfiles"

  # Install miscellany configs
  sleep 0.5
  PRINT "Installing miscellaneous configs..."

  for folder in "${HECKERSHELL}"/.config/*; do
    name="$(basename "${folder}")"
    sym="${HOME}/.config/${name}"

    sleep 0.5

    PRINT "Installing config '${name}'..."

    [ -L "${sym}" ] || SYM "${folder}" "${sym}"

  done

  # Ask if they wish to print the MOTD
  printf "%b" "Use default MOTD? (y/N) "
  read -r confirm

  isYes "${confirm}" || {
    PRINT "Disabling default motd."
    touch "${HECKERSHELL}/.noMOTD"
  }

  # Finish
  PRINT "HeckerShell installed to '${HECKERSHELL_DIR}'."

  PRINT "Tips:"
  PRINT "- Use 'shell motd ?' to enable/disable/customize your MOTD."
  PRINT "- Use 'shell fresh-screen' to clear the screen and print the MOTD."
  PRINT "- Use 'shell reload' to reload the shell configuration."

}

shell_uninstall() {
  # Check if Git is installed.
  [ ! -x "$(command -v git)" ] &&
    PRINT "Git is not installed." && exit 1

  # Confirm uninstallation
  printf "%b" "Are you sure you want to uninstall this? (y/N) "
  read -r confirm

  PRINT ""

  isYes "${confirm}" || {
    PRINT "Cancelling."
    exit 1
  }

  # Uninstall scripts
  PRINT "Uninstalling scripts..."
  [ -L "${SCRIPTS}" ] && rm -f "${SCRIPTS}"

  # Uninstall shell files
  PRINT "Uninstalling shell configs..."
  [ -L "${ZSHRC}" ] || rm -f "${ZSHRC}"
  [ -L "${BASHRC}" ] || rm -f "${BASHRC}"
  [ -L "${SHELLFILES}" ] || rm -f "${SHELLFILES}"

  # Uninstall miscellany configs
  PRINT "Uninstalling miscellaneous configs..."

  for folder in "${HECKERSHELL}"/.config/*; do
    linkRef="${folder##*/}"
    sym="${HOME}/.config/${linkRef}"

    PRINT "Uninstalling config ${linkRef}..."

    [ -L "${sym}" ] && rm -f "${sym}"
  done

  # Delete HeckerShell
  PRINT "Deleting HeckerShell..."
  rm -rf "${HECKERSHELL_DIR}"

  # Finish
  PRINT "Done."

}

shell_update() {
  [ -x "$(command -v git)" ] || { PRINT "" \
    'git must be installed.' && exit 1; }

  cd "${HECKERSHELL_DIR}" || { PRINT 'HeckerShell does not exist.' && exit 1; }

  # Confirm uninstallation
  printf "%b" "Are you sure you want to update? Changes you made will be lost. (y/N) "
  read -r confirm

  PRINT ""

  isYes "${confirm}" || {
    PRINT "Cancelling."
    exit 1
  }

  git pull

}

shell_cleanupdate() {
  shell_uninstall
  shell_install
}

[ $# -eq 0 ] && HELP && exit 0

case "$(LOWERCASE "${1}")" in
help)
  HELP
  ;;
reload)
  shell_reload
  ;;
fresh-screen)
  shell_freshscreen
  ;;
lines)
  shell_lines
  ;;
motd)
  shift
  shell_motd
  ;;
update)
  shift
  shell_update
  ;;
clean-update)
  shift
  shell_cleanupdate
  ;;
uninstall)
  shift
  shell_uninstall
  ;;
*)
  HELP
  ;;
esac
