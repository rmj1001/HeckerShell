#!/usr/bin/env bash

##############################################
#   Author: RMCJ <rmichael1001@gmail.com>
#   Project: scriptctl
#   Version: 1.0
#
#   Usage:
#
#   Description:
#		Manage user scripts
##############################################

##############################################
# PRE-PROCESSING

# shellcheck disable=SC1091
source "${SCRIPTS:=$HOME/.local/bin}"/00-api.sh

DISABLE_ROOT || exit 1

##############################################
# HELP MENU BUILDER

SCRIPT_VERSION="1.5"
SCRIPT_DESCRIPTION="Manage user scripts"
SCRIPT_USAGE="[FLAGS] [ARGS?] ..."
SCRIPT_EXAMPLE="--edit $(SCRIPTNAME)"

# Examples
EXAMPLE "--edit $(SCRIPTNAME)"

# Flags
FLAG "-l, --list" "" "List all user scripts"
FLAG "-c, --create" "[NAME]" "Create a new script"
FLAG "-e, --edit" "[NAME]" "Edit an existing script"
FLAG "-r, --delete" "[NAME]" "Delete a script"

##############################################
# MAIN LOGIC

SCRIPTS="${SCRIPTS:=$HOME/.local/bin}"

function scriptctl.ls() {
	for script in "${SCRIPTS}"/*; do
		# Script must not be directory or symlink, and must be executable
		[[ -d "${script}" || -L "${script}" || ! -x "${script}" ]] &&
			continue

		PRINT "  $(basename "${script}")"
	done
}

function scriptctl.mk() {
	# Check to see if script name is provided and script exists
	[[ -z "${1}" ]] && PRINT "You must specify a script name!" && return 1
	[[ -f "${SCRIPTS}"/"${1}" ]] && PRINT "Script '${1}' exists!" && return 1

	{
		cp "${SCRIPTS}"/00-template.sh "${SCRIPTS}"/"${1}".sh &&
			mv "${SCRIPTS}"/"${1}".sh "${SCRIPTS}"/"${1}" &&
			chmod +x "${SCRIPTS}"/"${1}" &&
			PRINT "$(SCRIPTNAME): Created '${1}'." &&
			{
				local askedit
				read -rp "Edit script? (y/N) " askedit
				CHECK_NO "${askedit}" || ${EDITOR:=nano} "${SCRIPTS}"/"${1}"
			}

		return 0
	}

	PRINT "Failed to create '${1}'." &&
		return 1
}

function scriptctl.ed() {
	# Check to see if script name is provided and script exists
	[[ -z "${1}" ]] && PRINT "You must specify a script name!" && return 1
	[[ ! -f "${SCRIPTS}"/"${1}" ]] &&
		PRINT "Script '${1}' doesn't exist!" && return 1

	# Edit the script
	${EDITOR:=nano} "${SCRIPTS}"/"${1}" &&
		PRINT "$(SCRIPTNAME): Edited '${1}'." &&
		return 0

	PRINT "Failed to edit '${1}'." &&
		return 1
}

function scriptctl.rm() {
	# Check to see if script name is provided and script exists
	[[ -z "${1}" ]] && PRINT "You must specify a script name!" && return 1
	[[ ! -f "${SCRIPTS}"/"${1}" ]] &&
		PRINT "Script '${1}' doesn't exist!" && return 1

	# Confirm whether to delete script
	PROMPT_NO "Delete '${1}'" || {
		rm -f "${SCRIPTS}/${1}" &&
			PRINT "$(SCRIPTNAME): Removed '${1}'." &&
			return 0

		PRINT "Failed to delete '${1}'." &&
			return 1
	}

	PRINT "Cancelled."
	return 1
}

# If no arguments are given, just show help prompt.
[[ $# -eq 0 ]] && HELP

# Iterate over all arguments and evaluate them
while [[ $# -gt 0 ]]; do

	case "$(LOWERCASE "${1}")" in

	\? | -h | --help)
		shift
		HELP
		;;

	-l | --list)
		shift
		scriptctl.ls
		exit $?
		;;

	-c | --create)
		shift
		scriptctl.mk "$@"
		exit $?
		;;

	-e | --edit)
		shift
		scriptctl.ed "$@"
		exit $?
		;;

	-r | --delete)
		shift
		scriptctl.rm "$@"
		exit $?
		;;

	*) INVALID_CMD "${1}" && exit 1 ;;

	esac

done
