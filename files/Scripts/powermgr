#!/usr/bin/env bash

##############################################
#   Author: RMCJ <rmichael1001@gmail.com>
#   Project: powermgr
#   Version: 1.0
#
#   Usage: [flags]
#
#   Description:
#	Shutdown, reboot, logout, lock, etc.
##############################################

##############################################
# PRE-PROCESSING

# shellcheck disable=SC1091
source "${SCRIPTS:=$HOME/.local/bin}"/00-api.sh

DISABLE_ROOT || exit 1

##############################################
# HELP MENU BUILDER

SCRIPT_VERSION="1.5"
SCRIPT_DESCRIPTION="Manage the state of your PC or account"
SCRIPT_USAGE="[FLAG]..."

# Examples
EXAMPLE "--shutdown" "Shutdown PC"
EXAMPLE "--gui" "Show gui"

# Flags
FLAG "--shutdown" "" "Power off computer"
FLAG "--reboot" "" "Restart computer"
FLAG "--logout" "" "Log out of account"
FLAG "--lock" "" "Lock user account"
FLAG "--unlock" "" "Unlock the user acount (CLI only)"
FLAG "" "" ""
FLAG "--gui" "" "Show the GUI version of this script."

##############################################
# MAIN LOGIC

# Rofi power menu
function powermgr.gui() {

	# If zenity or rofi are missing then disallow GUI use.
	REQUIRE_CMD "zenity" "rofi" || return 1

	# If no display then disallow GUI use.
	[[ -z "$DISPLAY" ]] && PRINT "No valid display!" && return 1

	# Turns on zenity dialogs
	GUI=1

	# Receive command from rofi
	cmd="$(PRINT 'Shutdown\nReboot\nLock\nLogout\nCancel' | rofi -dmenu -i -window-title "Power Manager" -prompt "Option: ")"

	# Show message 'cancelled' if cmd is empty (exit from rofi)
	[[ -z "${cmd}" ]] && zenity --info --text="Cancelled." && return 1
}

# Shutdown PC
function powermgr.shutoff() {
	[[ $GUI -eq 1 ]] && zenity --info --text="Shutting down..."

	systemctl poweroff
}

# Restart PC
function powermgr.restart() {
	[[ $GUI -eq 1 ]] && zenity --info --text="Rebooting..."

	systemctl reboot
}

# Kill user process and logout
function powermgr.logout() {
	[[ $GUI -eq 1 ]] && zenity --info --text="Logging out..."

	killall -u "$USER"
}

# Screen locker
function powermgr.lock() {
	[[ $GUI -eq 1 ]] && zenity --info --text="Locking screen..."

	# Lightdm lock command
	CMD_EXISTS "dm-tool" && dm-tool lock && return 0

	# Systemd lock command (doesn't work with lightdm)
	SESSIONS=("$(loginctl list-sessions | grep "$(whoami)" | awk '{print $1}' | tr '\n' ' ')")
	loginctl lock-session "${SESSIONS[@]}"
}

# Unlock available for KDE connect (CLI/Phone only)
# Does not work with Lightdm
function powermgr.unlock() {
	# Systemd unlock command (doesn't work with lightdm)
	SESSIONS=("$(loginctl list-sessions | grep "$(whoami)" | awk '{print $1}' | tr '\n' ' ')")
	loginctl unlock-session "${SESSIONS[@]}"
}

[[ $# -eq 0 ]] && {
	HELP
	exit 0
}

cmd="${1}"

[[ "${1}" == "gui" ]] && powermgr.gui

# Evaluate commands
case "$(LOWERCASE "${cmd}")" in
--shutdown)
	powermgr.shutoff
	;;
--reboot)
	powermgr.restart
	;;
--logout)
	powermgr.logout
	;;
--lock)
	powermgr.lock
	;;
--unlock)
	powermgr.unlock
	;;
\? | -h | --help)
	HELP
	exit 0
	;;
--helpgui)
	zenity --info --height=800 --width=800 --text="$(HELP)"
	;;
--cancel)
	zenity --info --text="Cancelled." && exit 1
	;;
*)
	zenity --warning --text="Invalid command '${cmd}'." && exit 1
	;;
esac
