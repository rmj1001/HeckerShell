#!/usr/bin/env bash

##############################################
#   Author: RMCJ <rmichael1001@gmail.com>
#   Project: powermgr
#   Version: 1.0
#
#   Usage: [flags]
#
#   Description:
#	Shutdown, reboot, logout, lock, etc.
##############################################

# shellcheck disable=SC1091
source "${SCRIPTS:=$HOME/.local/bin}"/00-api.sh

# Preprocessor flags
DISABLE_ROOT || exit 1

####################################

# Rofi power menu
function powermgr.gui() {

	# If zenity or rofi are missing then disallow GUI use.
	REQUIRE_CMD "zenity" "rofi" || return 1

	# If no display then disallow GUI use.
	[[ -z "$DISPLAY" ]] && PRINT "No valid display!" && return 1

	# Turns on zenity dialogs
	GUI=1

	# Receive command from rofi
	cmd="$(LOWERCASE "$(PRINT 'Shutdown\nReboot\nLock\nLogout\nCancel' | rofi -dmenu -i -window-title "Power Manager" -prompt "Option: ")")"

	# Show message 'cancelled' if cmd is empty (exit from rofi)
	[[ -z "${cmd}" ]] && zenity --info --text="Cancelled." && return 1
}

# Shutdown PC
function powermgr.shutoff() {
	[[ $GUI -eq 1 ]] && zenity --info --text="Shutting down..."

	systemctl poweroff
}

# Restart PC
function powermgr.restart() {
	[[ $GUI -eq 1 ]] && zenity --info --text="Rebooting..."

	systemctl reboot
}

# Kill user process and logout
function powermgr.logout() {
	[[ $GUI -eq 1 ]] && zenity --info --text="Logging out..."

	killall -u "$USER"
}

# Screen locker
function powermgr.lock() {
	[[ $GUI -eq 1 ]] && zenity --info --text="Locking screen..."

	# Lightdm lock command
	CMD_EXISTS "dm-tool" && dm-tool lock && return 0

	# Systemd lock command (doesn't work with lightdm)
	SESSIONS=("$(loginctl list-sessions | grep "$(whoami)" | awk '{print $1}' | tr '\n' ' ')")
	loginctl lock-session "${SESSIONS[@]}"
}

# Unlock available for KDE connect (CLI/Phone only)
# Does not work with Lightdm
function powermgr.unlock() {
	# Systemd unlock command (doesn't work with lightdm)
	SESSIONS=("$(loginctl list-sessions | grep "$(whoami)" | awk '{print $1}' | tr '\n' ' ')")
	loginctl unlock-session "${SESSIONS[@]}"
}

function powermgr.help() {
	PRINT "$(SCRIPTNAME) - Manage the state of your PC or account"
	PRINT
	PRINT "Usage:\t\t$(SCRIPTNAME) <flag> <args?>"
	PRINT "Example:\t$(SCRIPTNAME) --help"
	PRINT
	{
		PRINT "-------------|------|---------------------"
		PRINT "Flag|Args|Description"
		PRINT "-------------|------|---------------------"
		PRINT "||"
		PRINT "--shutdown||Power off computer"
		PRINT "--reboot||Restart computer"
		PRINT "--logout||Log out of account"
		PRINT "--lock||Lock user account"
		PRINT "--unlock||Unlock user account (CLI only)"
		PRINT "||"
		PRINT "--gui||Show the interactive prompt"
		PRINT "||"
		PRINT "-h, --help|n/a|Show this prompt"
	} | column -t -s'|'
}

[[ $# -eq 0 ]] && powermgr.help && exit 0
[[ "${1}" == "gui" ]] &&
	powermgr.gui ||
	cmd="$(LOWERCASE "${1}")"

# Evaluate commands
case "${cmd}" in
--shutdown) powermgr.shutoff ;;
--reboot) powermgr.restart ;;
--logout) powermgr.logout ;;
--lock) powermgr.lock ;;
--unlock) powermgr.unlock ;;
--help) powermgr.help ;;
--helpgui) zenity --info --height=800 --width=800 --text="$(powermgr.help)" ;;
--cancel) zenity --info --text="Cancelled." && exit 1 ;;
*) zenity --warning --text="Invalid command '${cmd}'." && exit 1 ;;
esac
