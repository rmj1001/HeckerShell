#!/usr/bin/env bash

#  ██╗  ██╗███████╗ ██████╗██╗  ██╗███████╗██████╗ ███████╗██╗  ██╗███████╗██╗     ██╗
#  ██║  ██║██╔════╝██╔════╝██║ ██╔╝██╔════╝██╔══██╗██╔════╝██║  ██║██╔════╝██║     ██║
#  ███████║█████╗  ██║     █████╔╝ █████╗  ██████╔╝███████╗███████║█████╗  ██║     ██║
#  ██╔══██║██╔══╝  ██║     ██╔═██╗ ██╔══╝  ██╔══██╗╚════██║██╔══██║██╔══╝  ██║     ██║
#  ██║  ██║███████╗╚██████╗██║  ██╗███████╗██║  ██║███████║██║  ██║███████╗███████╗███████╗
#  ╚═╝  ╚═╝╚══════╝ ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝
#

##############################################
# PRE-PROCESSING

# shellcheck disable=SC1091
source "${SCRIPTS:=$HOME/.local/bin}"/00-api.sh

DISABLE_ROOT || exit 1

##############################################
# HELP MENU BUILDER

SCRIPT_VERSION="1.5"
SCRIPT_DESCRIPTION="System cleaner script"
SCRIPT_USAGE="[FLAGS] [ARGS?] ..."

# Examples
EXAMPLE "--all"

# Flags
FLAG "-w, --wine" "" "Uninstall WINE and remove its files"
FLAG "-t, --empty-trash" "" "Empty the trash bin"
FLAG "-a, --all" "" "Run all cleaning modules"

##############################################
# MAIN LOGIC

GUI=0

function cleaner.wine() {
	MSG="WINE removed."

	function cleaner.wine.error() {
		{ ((GUI == 0)) && PRINT "$(SCRIPTNAME): WINE could not be removed." && return 1; } ||
			{ zenity --info --title "$(SCRIPTNAME)" --width 100 --height 100 --text "WINE could not be removed." && return 1; }
	}

	REQUIRE_CMD "wine" || cleaner.wine.error

	(
		CMD_EXISTS "dnf" && sudo dnf remove wine -y ||
			CMD_EXISTS "pacman" && sudo pacman -Rnsv wine wine-gecko wine-mono winetricks wine-staging ||
			CMD_EXISTS "apt" && sudo apt remove wine-stable-amd wine-stable-i386 wine-stable
	) || cleaner.wine.error

	# Removes all leftover wine applications
	[[ ! -d "${HOME}/.wine" ]] && cleaner.wine.error
	[[ -d "${HOME}/.wine" ]] && rm -rf "${HOME}/.wine"

	# The lines below will remove all entries for any windows software
	# installed with WINE from your application menu(s). Make sure to
	# remove them using your menu editor as well.

	{ rm -f "$HOME"/.config/menus/applications-merged/wine* &&
		rm -rf "$HOME"/.local/share/applications/wine &&
		rm -f "$HOME"/.local/share/desktop-directories/wine* &&
		rm -f "$HOME"/.local/share/icons/????_*.{xpm,png} &&
		rm -f "$HOME"/.local/share/icons/*-x-wine-*.{xpm,png}; } || cleaner.wine.error

	((GUI == 0)) && PRINT "$(SCRIPTNAME): Removed WINE." && return 0

	zenity --info \
		--title "$(SCRIPTNAME)" \
		--width 500 \
		--height 100 \
		--text "Removed WINE."
}

function cleaner.trash() {
	TRASHF="${HOME}/.local/share/Trash"
	MSG="Trash emptied successfully."

	(
		cd "${TRASHF}"/files && SILENTRUN rm -rf ./* &&
			cd "${TRASHF}"/info && SILENTRUN rm -rf ./*
	) || MSG="Trash failed to empty."

	((GUI == 0)) && PRINT "$(SCRIPTNAME): ${MSG}" && return 0

	zenity --info \
		--title "$(SCRIPTNAME)" \
		--width 200 \
		--height 100 \
		--text "${MSG}."
}

function cleaner.gui() {
	# If zenity or rofi are missing then disallow GUI use.
	REQUIRE_CMD "zenity" || return 1

	# If no display then disallow GUI use.
	[[ -z "$DISPLAY" ]] && PRINT "No valid display!" && return 1

	# Turns on zenity dialogs
	GUI=1

	# Receive command from rofi
	cmd="$(LOWERCASE "$(
		zenity --list \
			--checklist \
			--column "checkbox" \
			--column "Task" \
			--column "Description" \
			FALSE WINE "Remove WINE" \
			FALSE Trash "Empty trash"
	)")"

	cmds=("${cmd//\|/ }")

	echo "${cmds[@]}"

	# Show message 'cancelled' if cmd is empty (exit from rofi)
	# [[ ${#cmds[@]} -eq 0 ]] && zenity --info --text="Cancelled." && return 1

	# for cmd in ${cmds[@]}; do

	# 	case ${cmd} in

	# 		wine ) cleaner.wine ;;
	# 		trash ) cleaner.trash ;;

	# 	esac

	# done
}

# If no arguments are give, just show help prompt.
[[ $# -eq 0 ]] && {
	HELP
	exit 0
}

# Iterate over all arguments and evaluate them
while [[ $# -gt 0 ]]; do

	case "$(LOWERCASE "${1}")" in

	-w | --wine)
		shift
		cleaner.wine
		;;

	-t | --empty-trash)
		shift
		cleaner.trash
		;;

	-g | --gui)
		shift
		cleaner.gui
		;;

	\? | -h | --help)
		shift
		HELP
		exit 0
		;;

	*)
		INVALID_CMD "${1}"
		exit 1
		;;

	esac

done
